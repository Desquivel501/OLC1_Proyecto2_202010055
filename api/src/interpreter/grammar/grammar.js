/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,21],$V2=[1,22],$V3=[1,23],$V4=[1,24],$V5=[1,13],$V6=[1,18],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,19],$Vc=[1,20],$Vd=[5,15,17,25,26,30,32,33,35,38,39,45,46,47,48,50,52],$Ve=[1,29],$Vf=[1,45],$Vg=[16,40,57],$Vh=[1,56],$Vi=[1,64],$Vj=[1,55],$Vk=[1,68],$Vl=[1,69],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,67],$Vt=[1,93],$Vu=[1,94],$Vv=[1,95],$Vw=[1,96],$Vx=[1,97],$Vy=[1,98],$Vz=[1,99],$VA=[1,100],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[16,20,31,42,43,57,58,59,60,61,68,69,70,71,72,73,75,76,77],$VI=[2,70],$VJ=[1,118],$VK=[20,57],$VL=[42,43,58,59,60,61,68,69,70,71,72,73,75,76],$VM=[1,126],$VN=[1,162],$VO=[16,20,31,42,43,57,61,68,69,70,71,72,73,75,76,77],$VP=[16,20,31,42,43,57,58,59,61,68,69,70,71,72,73,75,76,77],$VQ=[16,20,31,57,68,69,70,71,72,73,75,76,77],$VR=[1,181],$VS=[1,180],$VT=[5,15,17,23,25,26,30,32,33,35,38,39,45,46,47,48,50,52],$VU=[25,30,32];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"print":9,"unaria":10,"if":11,"switch":12,"while":13,"do_while":14,"TK_BREAK":15,"TK_PTCOMA":16,"TK_IF":17,"TK_PARIZQ":18,"expresion":19,"TK_PARDER":20,"statement":21,"else":22,"TK_ELSE":23,"TK_LLAVIZQ":24,"TK_LLAVDER":25,"TK_SWITCH":26,"case_list":27,"default":28,"case":29,"TK_CASE":30,"TK_DOSPTS":31,"TK_DEFAULT":32,"TK_WHILE":33,"condicion":34,"TK_DO":35,"for":36,"TK_FOR":37,"TK_INT":38,"IDENTIFICADOR":39,"TK_IGUAL":40,"actualizacion":41,"TK_SUMA":42,"TK_RESTA":43,"listaIdentificador":44,"TK_DOBLE":45,"TK_CHAR":46,"TK_STRING":47,"TK_BOOLEAN":48,"ternario":49,"TK_PRINT":50,"listaExpresion":51,"TK_PRINTLN":52,"to_lower":53,"TK_LOWER":54,"to_upper":55,"TK_UPPER":56,"TK_COMA":57,"TK_POR":58,"TK_DIVIDIR":59,"TK_POTENCIA":60,"TK_MODULO":61,"ENTERO":62,"DECIMAL":63,"TK_TRUE":64,"TK_FALSE":65,"CADENA":66,"CHAR":67,"TK_MENOR":68,"TK_MAYOR":69,"TK_MENORIG":70,"TK_MAYORIG":71,"TK_DOBLEIG":72,"TK_NOIG":73,"TK_NOT":74,"TK_OR":75,"TK_AND":76,"TK_INTE":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"TK_BREAK",16:"TK_PTCOMA",17:"TK_IF",18:"TK_PARIZQ",20:"TK_PARDER",23:"TK_ELSE",24:"TK_LLAVIZQ",25:"TK_LLAVDER",26:"TK_SWITCH",30:"TK_CASE",31:"TK_DOSPTS",32:"TK_DEFAULT",33:"TK_WHILE",35:"TK_DO",37:"TK_FOR",38:"TK_INT",39:"IDENTIFICADOR",40:"TK_IGUAL",42:"TK_SUMA",43:"TK_RESTA",45:"TK_DOBLE",46:"TK_CHAR",47:"TK_STRING",48:"TK_BOOLEAN",50:"TK_PRINT",52:"TK_PRINTLN",54:"TK_LOWER",56:"TK_UPPER",57:"TK_COMA",58:"TK_POR",59:"TK_DIVIDIR",60:"TK_POTENCIA",61:"TK_MODULO",62:"ENTERO",63:"DECIMAL",64:"TK_TRUE",65:"TK_FALSE",66:"CADENA",67:"CHAR",68:"TK_MENOR",69:"TK_MAYOR",70:"TK_MENORIG",71:"TK_MAYORIG",72:"TK_DOBLEIG",73:"TK_NOIG",74:"TK_NOT",75:"TK_OR",76:"TK_AND",77:"TK_INTE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[11,6],[22,2],[22,2],[22,0],[21,3],[21,2],[12,8],[12,7],[12,7],[27,2],[27,1],[29,4],[29,3],[28,3],[13,7],[13,6],[14,8],[14,7],[36,14],[36,10],[41,3],[41,3],[41,3],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,3],[7,3],[7,3],[7,3],[7,3],[8,4],[9,5],[9,5],[53,4],[55,4],[51,3],[51,1],[44,3],[44,1],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,4],[19,4],[19,4],[19,1],[19,1],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,3],[49,5],[10,4],[10,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    return $$[$0-1]

break;
case 2: case 22:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 23:
 this.$ = [$$[$0]]; 
break;
case 12:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 13:
this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 14: case 15:
this.$ = $$[$0]
break;
case 16:
this.$ = null
break;
case 17:
this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 18:
this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 19:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 20:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 21:
this.$ = new Switch($$[$0-4], null, $$[$0], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 24:
this.$ = new Case($$[$0-2], new Statement($$[$0], _$[$0-3].first_line, _$[$0-3].first_column), _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 25:
this.$ = new Case($$[$0-1], new Statement([], _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 26:
this.$ = new Statement($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 27:
this.$ = new While($$[$0-4], new Statement($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column), _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 28:
this.$ = new While($$[$0-3], new Statement([], _$[$0-5].first_line, _$[$0-5].first_column), _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 29:
this.$ = new While($$[$0-1], new Statement($$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column), _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 30:
this.$ = new While($$[$0], new Statement([], _$[$0-6].first_line, _$[$0-6].first_column), _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 36: case 41:
this.$ = new Declaracion(Type.NUMBER, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 37: case 42:
this.$ = new Declaracion(Type.DOBLE, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 38: case 43:
this.$ = new Declaracion(Type.CHAR, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 39: case 44:
this.$ = new Declaracion(Type.STRING, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 40: case 45:
this.$ = new Declaracion(Type.BOOLEAN, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 46:
this.$ = new Declaracion(Type.NUMBER, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 47:
this.$ = new Declaracion(Type.DOBLE, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 48:
this.$ = new Declaracion(Type.CHAR, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 49:
this.$ = new Declaracion(Type.STRING, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 50:
this.$ = new Declaracion(Type.BOOLEAN, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 51:
this.$ = new Declaracion(-1, [$$[$0-3]], $$[$0-1], false,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 52:
this.$ = new Print($$[$0-2],false, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 53:
this.$ = new Print($$[$0-2],true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 54:
this.$ = new ToLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 55:
this.$ = new ToUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 56: case 58:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 57: case 59:
this.$ = [$$[$0]]
break;
case 60:
this.$ = new Aritmetica(new Literal("-1", TipoLiteral.NUMBER, _$[$0-1].first_line,  _$[$0-1].first_column), $$[$0], TipoAritmetico.MULTIPLICACION, _$[$0-1].first_line,  _$[$0-1].first_column)
break;
case 61:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.SUMA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 62:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.RESTA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 63:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MULTIPLICACION, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 64:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.DIVISION, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 65:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.POTENCIA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 66:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MODULO, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 67:
this.$ = $$[$0-1]
break;
case 68:
this.$ = new Aritmetica($$[$0-2], $$[$0-2], TipoAritmetico.INCRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 69:
this.$ = new Aritmetica($$[$0-2], $$[$0-2], TipoAritmetico.DECRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 71:
this.$ = new Literal($$[$0], TipoLiteral.NUMBER, _$[$0].first_line,  _$[$0].first_column)
break;
case 72:
this.$ = new Literal($$[$0], TipoLiteral.DOBLE, _$[$0].first_line,  _$[$0].first_column)
break;
case 73: case 74:
this.$ = new Literal($$[$0], TipoLiteral.BOOLEAN, _$[$0].first_line,  _$[$0].first_column)
break;
case 75:
this.$ = new Literal($$[$0], TipoLiteral.STRING, _$[$0].first_line,  _$[$0].first_column)
break;
case 76:
this.$ = new Literal($$[$0], TipoLiteral.CHAR, _$[$0].first_line,  _$[$0].first_column)
break;
case 77:
this.$= new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column)
break;
case 78:
this.$ = new Casteo(Type.NUMBER,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 79:
this.$ = new Casteo(Type.DOBLE,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 80:
this.$ = new Casteo(Type.CHAR,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 83:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 84:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 85:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 86:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 87:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.IGUAL_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 88:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.DIFERENTE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 89:
this.$ = new Relacional($$[$0], $$[$0], TipoRelacional.NOT, _$[$0-1].first_line,  _$[$0-1].first_column)
break;
case 90:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.OR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 91:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.AND, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 92:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line,  _$[$0-4].first_column)
break;
case 93:
this.$ = new Declaracion(-1, [$$[$0-3]], new Aritmetica(new Acceso($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column), null, TipoAritmetico.INCRE, _$[$0-3].first_line,  _$[$0-3].first_column), false, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 94:
this.$ = new Declaracion(-1, [$$[$0-3]], new Aritmetica(new Acceso($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column), null, TipoAritmetico.DECRE, _$[$0-3].first_line,  _$[$0-3].first_column), false, _$[$0-3].first_line, _$[$0-3].first_column)
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,26:$V2,33:$V3,35:$V4,38:$V5,39:$V6,45:$V7,46:$V8,47:$V9,48:$Va,50:$Vb,52:$Vc},{1:[3]},{5:[1,25],6:26,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,26:$V2,33:$V3,35:$V4,38:$V5,39:$V6,45:$V7,46:$V8,47:$V9,48:$Va,50:$Vb,52:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),{16:[1,27]},{39:$Ve,44:28},{39:$Ve,44:30},{39:$Ve,44:31},{39:$Ve,44:32},{39:$Ve,44:33},{40:[1,34],42:[1,35],43:[1,36]},{18:[1,37]},{18:[1,38]},{18:[1,39]},{18:[1,40]},{18:[1,41]},{24:[1,42]},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,12]),{16:[1,44],40:[1,43],57:$Vf},o($Vg,[2,59]),{16:[1,47],40:[1,46],57:$Vf},{16:[1,49],40:[1,48],57:$Vf},{16:[1,51],40:[1,50],57:$Vf},{16:[1,53],40:[1,52],57:$Vf},{18:$Vh,19:54,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{42:[1,70]},{43:[1,71]},{18:$Vh,19:73,34:57,39:$Vi,43:$Vj,51:72,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:73,34:57,39:$Vi,43:$Vj,51:74,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:75,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:76,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:78,34:77,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{4:79,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,25:[1,80],26:$V2,33:$V3,35:$V4,38:$V5,39:$V6,45:$V7,46:$V8,47:$V9,48:$Va,50:$Vb,52:$Vc},{18:$Vh,19:81,34:57,39:$Vi,43:$Vj,49:82,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},o($Vd,[2,46]),{39:[1,83]},{18:$Vh,19:84,34:57,39:$Vi,43:$Vj,49:85,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},o($Vd,[2,47]),{18:$Vh,19:86,34:57,39:$Vi,43:$Vj,49:87,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},o($Vd,[2,48]),{18:$Vh,19:88,34:57,39:$Vi,43:$Vj,49:89,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},o($Vd,[2,49]),{18:$Vh,19:90,34:57,39:$Vi,43:$Vj,49:91,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},o($Vd,[2,50]),{16:[1,92],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG},{18:$Vh,19:107,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:108,34:57,38:[1,109],39:$Vi,43:$Vj,45:[1,110],46:[1,111],53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},o($VH,$VI),o($VH,[2,71]),o($VH,[2,72]),o($VH,[2,73]),o($VH,[2,74]),o($VH,[2,75]),o($VH,[2,76]),o($VH,[2,77]),o($VH,[2,81]),o($VH,[2,82]),{18:$Vh,19:112,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:[1,113]},{18:[1,114]},{16:[1,115]},{16:[1,116]},{20:[1,117],57:$VJ},o($VK,[2,57],{42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG}),{20:[1,119],57:$VJ},{20:[1,120],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG},{20:[1,121],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG},o($VL,$VI,{20:[1,122]}),{42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG},{6:26,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,25:[1,123],26:$V2,33:$V3,35:$V4,38:$V5,39:$V6,45:$V7,46:$V8,47:$V9,48:$Va,50:$Vb,52:$Vc},{33:[1,124]},{16:[1,125],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG,77:$VM},{16:[1,127]},o($Vg,[2,58]),{16:[1,128],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG,77:$VM},{16:[1,129]},{16:[1,130],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG,77:$VM},{16:[1,131]},{16:[1,132],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG,77:$VM},{16:[1,133]},{16:[1,134],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG,77:$VM},{16:[1,135]},o($Vd,[2,51]),{18:$Vh,19:136,34:57,39:$Vi,42:[1,137],43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:138,34:57,39:$Vi,43:[1,139],53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:140,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:141,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:142,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:143,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:144,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:145,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:146,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:147,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:148,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:149,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:150,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:151,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},o($VH,[2,60]),{20:[1,152],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG},{20:[1,153]},{20:[1,154]},{20:[1,155]},o($VH,[2,89]),{18:$Vh,19:156,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:157,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},o($Vd,[2,93]),o($Vd,[2,94]),{16:[1,158]},{18:$Vh,19:159,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{16:[1,160]},{21:161,24:$VN},{24:[1,163]},{24:[1,164]},{33:[1,165]},{18:[1,166]},o($Vd,[2,36]),{18:$Vh,19:167,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},o($Vd,[2,41]),o($Vd,[2,37]),o($Vd,[2,42]),o($Vd,[2,38]),o($Vd,[2,43]),o($Vd,[2,39]),o($Vd,[2,44]),o($Vd,[2,40]),o($Vd,[2,45]),o($VO,[2,61],{58:$Vv,59:$Vw,60:$Vx}),o($VH,[2,68]),o($VO,[2,62],{58:$Vv,59:$Vw,60:$Vx}),o($VH,[2,69],{34:57,53:65,55:66,19:107,18:$Vh,39:$Vi,54:$Vk,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs}),o($VP,[2,63],{60:$Vx}),o($VP,[2,64],{60:$Vx}),o($VP,[2,65]),o([16,20,31,57,61,68,69,70,71,72,73,75,76,77],[2,66],{42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx}),o($VQ,[2,83],{42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($VQ,[2,84],{42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($VQ,[2,85],{42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($VQ,[2,86],{42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($VQ,[2,87],{42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($VQ,[2,88],{42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o([16,20,31,57,75,77],[2,90],{42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,76:$VG}),o([16,20,31,57,75,76,77],[2,91],{42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($VH,[2,67]),{18:$Vh,19:168,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:169,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{18:$Vh,19:170,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{20:[1,171],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG},{20:[1,172],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG},o($Vd,[2,52]),o($VK,[2,56],{42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG}),o($Vd,[2,53]),o($Vd,[2,16],{22:173,23:[1,174]}),{4:175,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,25:[1,176],26:$V2,33:$V3,35:$V4,38:$V5,39:$V6,45:$V7,46:$V8,47:$V9,48:$Va,50:$Vb,52:$Vc},{27:177,28:178,29:179,30:$VR,32:$VS},{4:182,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,25:[1,183],26:$V2,33:$V3,35:$V4,38:$V5,39:$V6,45:$V7,46:$V8,47:$V9,48:$Va,50:$Vb,52:$Vc},{18:[1,184]},{18:$Vh,19:78,34:185,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{31:[1,186],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG},o($VH,[2,78]),o($VH,[2,79]),o($VH,[2,80]),o($VH,[2,54]),o($VH,[2,55]),o($Vd,[2,13]),{11:188,17:$V1,21:187,24:$VN},{6:26,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,25:[1,189],26:$V2,33:$V3,35:$V4,38:$V5,39:$V6,45:$V7,46:$V8,47:$V9,48:$Va,50:$Vb,52:$Vc},o($VT,[2,18]),{25:[1,191],28:190,29:192,30:$VR,32:$VS},{25:[1,193]},o($VU,[2,23]),{31:[1,194]},{18:$Vh,19:195,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},{6:26,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,25:[1,196],26:$V2,33:$V3,35:$V4,38:$V5,39:$V6,45:$V7,46:$V8,47:$V9,48:$Va,50:$Vb,52:$Vc},o($Vd,[2,28]),{18:$Vh,19:78,34:197,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},o($VL,$VI,{20:[1,198]}),{18:$Vh,19:199,34:57,39:$Vi,43:$Vj,53:65,54:$Vk,55:66,56:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,74:$Vs},o($Vd,[2,14]),o($Vd,[2,15]),o($VT,[2,17]),{25:[1,200]},o($Vd,[2,20]),o($VU,[2,22]),o($Vd,[2,21]),{4:201,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,26:$V2,33:$V3,35:$V4,38:$V5,39:$V6,45:$V7,46:$V8,47:$V9,48:$Va,50:$Vb,52:$Vc},{31:[1,202],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG},o($Vd,[2,27]),o($VL,$VI,{20:[1,203]}),o($Vd,[2,30]),{16:[2,92],42:$Vt,43:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VG},o($Vd,[2,19]),{6:26,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,25:[2,26],26:$V2,33:$V3,35:$V4,38:$V5,39:$V6,45:$V7,46:$V8,47:$V9,48:$Va,50:$Vb,52:$Vc},o($VU,[2,25],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,4:204,15:$V0,17:$V1,26:$V2,33:$V3,35:$V4,38:$V5,39:$V6,45:$V7,46:$V8,47:$V9,48:$Va,50:$Vb,52:$Vc}),o($Vd,[2,29]),o($VU,[2,24],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,6:26,15:$V0,17:$V1,26:$V2,33:$V3,35:$V4,38:$V5,39:$V6,45:$V7,46:$V8,47:$V9,48:$Va,50:$Vb,52:$Vc})],
defaultActions: {25:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Aritmetica, TipoAritmetico} = require("../Expresion/Aritmetica")
    const {Literal, TipoLiteral} = require("../Expresion/Literal")
    const {Relacional, TipoRelacional} = require("../Expresion/Relacional")
    const {Ternario} = require("../Expresion/Ternario")
    const {Casteo} = require("../Expresion/Casteo")
    const {Declaracion} = require("../Instruccion/Declaracion")
    const {Print} = require('../Instruccion/Print')
    const {Acceso} = require('../Expresion/Acceso')
    const {Type} = require('../Expresion/Retorno')
    const {If} = require("../Instruccion/If")
    const {Statement} = require("../Instruccion/Statement")
    const {Switch} = require("../Instruccion/Switch")
    const {Case} = require("../Instruccion/Case")
    const {Break} = require("../Instruccion/Break")
    const {While} = require("../Instruccion/While")
    const {Continue} = require("../Instruccion/Continue")
    const { Program }= require( "../Misc/Program")
    const {DoWhile} = require("../Instruccion/DoWhile")
    const {ToUpper} = require("../Instruccion/ToUpper")
    const {ToLower} = require("../Instruccion/ToLower")

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 52; 
break;
case 4:return 50; 
break;
case 5:return 64; 
break;
case 6:return 65; 
break;
case 7:return 38; 
break;
case 8:return 47; 
break;
case 9:return 46; 
break;
case 10:return 48; 
break;
case 11:return 45; 
break;
case 12:return 17;
break;
case 13:return 23;
break;
case 14:return 26;
break;
case 15:return 30;
break;
case 16:return 32;
break;
case 17:return 15;
break;
case 18:return 33;
break;
case 19:return 'TK_CONTINUE';
break;
case 20:return 35;
break;
case 21:return 37;
break;
case 22:return 54;
break;
case 23:return 56;
break;
case 24: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 66; 
break;
case 25: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 67; 
break;
case 26:return 63;
break;
case 27:return 62;
break;
case 28:return 39;
break;
case 29:return 18;
break;
case 30:return 20;
break;
case 31:return 24;
break;
case 32:return 25;
break;
case 33:return 16;
break;
case 34:return 31; 
break;
case 35:return 57;
break;
case 36:return 42;
break;
case 37:return 43;
break;
case 38:return 58;
break;
case 39:return 59;
break;
case 40:return 60;
break;
case 41:return 61;
break;
case 42:return 72;
break;
case 43:return 70;
break;
case 44:return 71;
break;
case 45:return 68;
break;
case 46:return 69;
break;
case 47:return 40;
break;
case 48:return 73;
break;
case 49:return 74;
break;
case 50:return 75; 
break;
case 51:return 76;
break;
case 52:return 77; 
break;
case 53: Program.consola += "Error Lexico - El carecter '" + yy_.yytext + "' no pertenece al lenguaje (Linea " + yy_.yylloc.first_line + "; Columna " + yy_.yylloc.first_column + ")" 
break;
case 54:return 5;
break;
}
},
rules: [/^(?:[\r\t\n\s]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:doble\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:continue\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}