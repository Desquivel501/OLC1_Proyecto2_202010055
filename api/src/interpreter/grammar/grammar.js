/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,26],$V2=[1,27],$V3=[1,29],$V4=[1,28],$V5=[1,22],$V6=[1,31],$V7=[1,23],$V8=[1,24],$V9=[1,33],$Va=[1,35],$Vb=[1,32],$Vc=[1,34],$Vd=[1,30],$Ve=[5,30,39,46,48,49,52,59,60,62,76,77,96,97,99],$Vf=[1,43],$Vg=[1,44],$Vh=[1,42],$Vi=[1,46],$Vj=[1,54],$Vk=[37,52,100],$Vl=[21,55,67],$Vm=[1,62],$Vn=[1,68],$Vo=[1,61],$Vp=[1,79],$Vq=[1,80],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,76],$Vw=[1,77],$Vx=[1,78],$Vy=[1,81],$Vz=[1,82],$VA=[1,116],$VB=[1,123],$VC=[1,124],$VD=[5,20,30,38,39,43,45,46,48,49,52,59,60,62,76,77,96,97,98,99],$VE=[1,131],$VF=[1,132],$VG=[1,133],$VH=[1,134],$VI=[1,135],$VJ=[1,136],$VK=[1,137],$VL=[1,138],$VM=[1,139],$VN=[1,140],$VO=[1,141],$VP=[1,142],$VQ=[1,143],$VR=[1,144],$VS=[21,33,44,53,54,67,68,69,70,71,84,85,86,87,88,89,91,92,93,101],$VT=[2,85],$VU=[1,161],$VV=[1,163],$VW=[33,67,101],$VX=[53,54,68,69,70,71,84,85,86,87,88,89,91,92],$VY=[5,20,30,36,38,39,43,45,46,48,49,52,59,60,62,76,77,96,97,98,99],$VZ=[20,30,38,39,43,45,46,48,49,52,59,60,62,76,77,96,97,98],$V_=[33,67],$V$=[21,33,44,53,54,67,71,84,85,86,87,88,89,91,92,93,101],$V01=[21,33,44,53,54,67,68,69,71,84,85,86,87,88,89,91,92,93,101],$V11=[21,33,44,67,84,85,86,87,88,89,91,92,93,101],$V21=[2,128],$V31=[1,260],$V41=[1,259],$V51=[1,262],$V61=[38,43,45],$V71=[67,101];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones_main":4,"EOF":5,"instrucciones":6,"instruccion":7,"instruccion_main":8,"declaracion":9,"asignacion":10,"print":11,"unaria":12,"if":13,"switch":14,"while":15,"for":16,"do_while":17,"funcion":18,"metodo":19,"TK_BREAK":20,"TK_PTCOMA":21,"return":22,"llamada":23,"vector_1":24,"mod_vector1":25,"vector_2":26,"mod_vector2":27,"run":28,"llamada_out":29,"TK_IF":30,"TK_PARIZQ":31,"expresion":32,"TK_PARDER":33,"statement":34,"else":35,"TK_ELSE":36,"TK_LLAVIZQ":37,"TK_LLAVDER":38,"TK_SWITCH":39,"case_list":40,"default":41,"case":42,"TK_CASE":43,"TK_DOSPTS":44,"TK_DEFAULT":45,"TK_WHILE":46,"condicion":47,"TK_DO":48,"TK_FOR":49,"dec_for":50,"actualizacion":51,"IDENTIFICADOR":52,"TK_SUMA":53,"TK_RESTA":54,"TK_IGUAL":55,"tipo":56,"listaIdentificador":57,"ternario":58,"TK_INT":59,"TK_PRINT":60,"listaExpresion":61,"TK_PRINTLN":62,"to_lower":63,"TK_LOWER":64,"to_upper":65,"TK_UPPER":66,"TK_COMA":67,"TK_POR":68,"TK_DIVIDIR":69,"TK_POTENCIA":70,"TK_MODULO":71,"ENTERO":72,"DECIMAL":73,"CADENA":74,"CHAR":75,"TK_DOBLE":76,"TK_CHAR":77,"acceso_vector1":78,"acceso_vector2":79,"length":80,"type":81,"TK_TRUE":82,"TK_FALSE":83,"TK_MENOR":84,"TK_MAYOR":85,"TK_MENORIG":86,"TK_MAYORIG":87,"TK_DOBLEIG":88,"TK_NOIG":89,"TK_NOT":90,"TK_OR":91,"TK_AND":92,"TK_INTE":93,"parametros":94,"TK_VOID":95,"TK_STRING":96,"TK_BOOLEAN":97,"TK_RETURN":98,"TK_RUN":99,"TK_CORIZQ":100,"TK_CORDER":101,"TK_NEW":102,"lista_vector":103,"TK_LENGTH":104,"TK_TYPE":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"TK_BREAK",21:"TK_PTCOMA",30:"TK_IF",31:"TK_PARIZQ",33:"TK_PARDER",36:"TK_ELSE",37:"TK_LLAVIZQ",38:"TK_LLAVDER",39:"TK_SWITCH",43:"TK_CASE",44:"TK_DOSPTS",45:"TK_DEFAULT",46:"TK_WHILE",48:"TK_DO",49:"TK_FOR",52:"IDENTIFICADOR",53:"TK_SUMA",54:"TK_RESTA",55:"TK_IGUAL",59:"TK_INT",60:"TK_PRINT",62:"TK_PRINTLN",64:"TK_LOWER",66:"TK_UPPER",67:"TK_COMA",68:"TK_POR",69:"TK_DIVIDIR",70:"TK_POTENCIA",71:"TK_MODULO",72:"ENTERO",73:"DECIMAL",74:"CADENA",75:"CHAR",76:"TK_DOBLE",77:"TK_CHAR",82:"TK_TRUE",83:"TK_FALSE",84:"TK_MENOR",85:"TK_MAYOR",86:"TK_MENORIG",87:"TK_MAYORIG",88:"TK_DOBLEIG",89:"TK_NOIG",90:"TK_NOT",91:"TK_OR",92:"TK_AND",93:"TK_INTE",95:"TK_VOID",96:"TK_STRING",97:"TK_BOOLEAN",98:"TK_RETURN",99:"TK_RUN",100:"TK_CORIZQ",101:"TK_CORDER",102:"TK_NEW",104:"TK_LENGTH",105:"TK_TYPE"},
productions_: [0,[3,2],[6,2],[6,1],[4,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,1],[7,2],[7,1],[7,1],[7,1],[7,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,2],[13,6],[35,2],[35,2],[35,0],[34,3],[34,2],[14,8],[14,7],[14,7],[40,2],[40,1],[42,4],[42,3],[41,3],[15,5],[17,6],[16,8],[16,8],[51,3],[51,3],[51,3],[9,5],[9,5],[9,3],[10,4],[50,5],[11,5],[11,5],[63,4],[65,4],[61,3],[61,1],[57,3],[57,1],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,4],[32,4],[32,4],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[47,1],[47,1],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,2],[47,3],[47,3],[58,5],[12,4],[12,4],[18,7],[18,6],[19,7],[19,6],[94,4],[94,2],[56,1],[56,1],[56,1],[56,1],[56,1],[22,3],[23,4],[23,3],[29,4],[29,3],[28,5],[28,4],[24,9],[24,11],[78,4],[25,7],[26,11],[26,16],[79,7],[27,10],[103,5],[103,3],[80,4],[81,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    return $$[$0-1]

break;
case 2: case 4: case 50:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 5: case 51:
 this.$ = [$$[$0]]; 
break;
case 17:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 41:
this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 42: case 43: case 61:
this.$ = $$[$0]
break;
case 44:
this.$ = null
break;
case 45:
this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 46:
this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 47:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 48:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 49:
this.$ = new Switch($$[$0-4], null, $$[$0], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 52:
this.$ = new Case($$[$0-2], new Statement($$[$0], _$[$0-3].first_line, _$[$0-3].first_column), _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 53:
this.$ = new Case($$[$0-1], new Statement([], _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 54:
this.$ = new Statement($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 55:
this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 56:
this.$ = new While($$[$01],$$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 57: case 58:
this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 59:
this.$ = new Aritmetica(new Acceso($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column), new Acceso($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column), TipoAritmetico.INCRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 60:
this.$ = new Aritmetica(new Acceso($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column), new Acceso($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column), TipoAritmetico.DECRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 62: case 63:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 64:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 65:
this.$ = new Declaracion(-1, [$$[$0-3]], $$[$0-1], false,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 66:
this.$ = new Declaracion(Type.INTEGER, [$$[$0-3]], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 67:
this.$ = new Print($$[$0-2],false, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 68:
this.$ = new Print($$[$0-2],true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 69:
this.$ = new ToLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 70:
this.$ = new ToUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 71: case 73:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 72: case 74:
this.$ = [$$[$0]]
break;
case 75:
this.$ = new Aritmetica(new Literal("-1", TipoLiteral.NUMBER, _$[$0-1].first_line,  _$[$0-1].first_column), $$[$0], TipoAritmetico.MULTIPLICACION, _$[$0-1].first_line,  _$[$0-1].first_column)
break;
case 76:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.SUMA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 77:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.RESTA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 78:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MULTIPLICACION, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 79:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.DIVISION, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 80:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.POTENCIA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 81:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MODULO, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 82:
this.$ = $$[$0-1]
break;
case 83:
this.$ = new Aritmetica($$[$0-2], $$[$0-2], TipoAritmetico.INCRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 84:
this.$ = new Aritmetica($$[$0-2], $$[$0-2], TipoAritmetico.DECRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 86:
this.$ = new Literal($$[$0], TipoLiteral.NUMBER, _$[$0].first_line,  _$[$0].first_column)
break;
case 87:
this.$ = new Literal($$[$0], TipoLiteral.DOBLE, _$[$0].first_line,  _$[$0].first_column)
break;
case 88:
this.$ = new Literal($$[$0], TipoLiteral.STRING, _$[$0].first_line,  _$[$0].first_column)
break;
case 89:
this.$ = new Literal($$[$0], TipoLiteral.CHAR, _$[$0].first_line,  _$[$0].first_column)
break;
case 90:
this.$= new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column)
break;
case 91:
this.$ = new Casteo(Type.INTEGER,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 92:
this.$ = new Casteo(Type.DOBLE,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 93:
this.$ = new Casteo(Type.CHAR,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 101: case 102:
this.$ = new Literal($$[$0], TipoLiteral.BOOLEAN, _$[$0].first_line,  _$[$0].first_column)
break;
case 103:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 104:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 105:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 106:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 107:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.IGUAL_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 108:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.DIFERENTE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 109:
this.$ = new Relacional($$[$0], $$[$0], TipoRelacional.NOT, _$[$0-1].first_line,  _$[$0-1].first_column)
break;
case 110:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.OR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 111:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.AND, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 112:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line,  _$[$0-4].first_column)
break;
case 113:
this.$ = new Declaracion(-1, [$$[$0-3]], new Aritmetica(new Acceso($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column), null, TipoAritmetico.INCRE, _$[$0-3].first_line,  _$[$0-3].first_column), false, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 114:
this.$ = new Declaracion(-1, [$$[$0-3]], new Aritmetica(new Acceso($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column), null, TipoAritmetico.DECRE, _$[$0-3].first_line,  _$[$0-3].first_column), false, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 115:
this.$ = new Funcion($$[$0-6], $$[$0], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 116:
this.$ = new Funcion($$[$0-5], $$[$0], [], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 117:
this.$ = new Funcion($$[$0-6], $$[$0], $$[$0-4], Type.VOID, _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 118:
this.$ = new Funcion($$[$0-5], $$[$0], [], Type.VOID, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 119:
$$[$0-3].push(new Parametro($$[$0-1], $$[$0])); this.$ = $$[$0-3];
break;
case 120:
this.$ = [new Parametro($$[$0-1], $$[$0])]
break;
case 121:
this.$ = Type.INTEGER
break;
case 122:
this.$ = Type.STRING
break;
case 123:
this.$ = Type.DOBLE
break;
case 124:
this.$ = Type.BOOLEAN
break;
case 125:
this.$ = Type.CHAR
break;
case 126:
this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 127:
this.$ = new Llamada($$[$0-3], $$[$0-1], true, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 128:
this.$ = new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 129:
this.$ = new Llamada($$[$0-3], $$[$0-1], false, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 130:
this.$ = new Llamada($$[$0-2], [], false, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 131:
this.$ = new Llamada($$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 132:
this.$ = new Llamada($$[$0-2], [], true, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 133:
this.$ = new DeclararVector1($$[$0-8], $$[$0-8], $$[$0-7], $$[$0-2],new Literal("-999", TipoLiteral.NUMBER, _$[$0-8].first_line,  _$[$0-8].first_column) , _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 134:
this.$ = new DeclararVector1($$[$0-10], $$[$0-4], $$[$0-9], [], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column)
break;
case 135:
this.$= new AccesoVector1($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 136:
this.$= new ModVector1($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 137:
this.$ = new DeclararVector2($$[$0-10], $$[$0-10], $$[$0-9], $$[$0-2],new Literal("-999", TipoLiteral.NUMBER, _$[$0-10].first_line,  _$[$0-10].first_column), new Literal("-999", TipoLiteral.NUMBER, _$[$0-10].first_line,  _$[$0-10].first_column) , _$[$0-10].first_line, _$[$0-10].first_column)
break;
case 138:
this.$ = new DeclararVector2($$[$0-15], $$[$0-7], $$[$0-14], [], $$[$0-5], $$[$0-2], _$[$0-15].first_line, _$[$0-15].first_column)
break;
case 139:
this.$= new AccesoVector2($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 140:
this.$= new ModVector2($$[$0-9],$$[$0-7],$$[$0-4],$$[$0-1],_$[$0-9].first_line, _$[$0-9].first_column)
break;
case 141:
$$[$0-4].push($$[$0-1]); this.$ = $$[$0-4];
break;
case 142:
this.$ = [$$[$0-1]]
break;
case 143:
this.$ = new Length($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 144:
this.$ = new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
}
},
table: [{3:1,4:2,8:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,24:15,25:16,26:17,27:18,28:19,29:20,30:$V0,39:$V1,46:$V2,48:$V3,49:$V4,52:$V5,56:21,59:$V6,60:$V7,62:$V8,76:$V9,77:$Va,96:$Vb,97:$Vc,99:$Vd},{1:[3]},{5:[1,36],8:37,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,24:15,25:16,26:17,27:18,28:19,29:20,30:$V0,39:$V1,46:$V2,48:$V3,49:$V4,52:$V5,56:21,59:$V6,60:$V7,62:$V8,76:$V9,77:$Va,96:$Vb,97:$Vc,99:$Vd},o($Ve,[2,5]),o($Ve,[2,24]),o($Ve,[2,25]),o($Ve,[2,26]),o($Ve,[2,27]),o($Ve,[2,28]),o($Ve,[2,29]),o($Ve,[2,30]),o($Ve,[2,31]),o($Ve,[2,32]),o($Ve,[2,33]),o($Ve,[2,34]),o($Ve,[2,35]),o($Ve,[2,36]),o($Ve,[2,37]),o($Ve,[2,38]),{21:[1,38]},{21:[1,39]},{52:[1,41],57:40},{31:[1,45],53:$Vf,54:$Vg,55:$Vh,100:$Vi},{31:[1,47]},{31:[1,48]},{31:[1,49]},{31:[1,50]},{31:[1,51]},{31:[1,52]},{34:53,37:$Vj},{52:[1,55]},o($Vk,[2,121]),o($Vk,[2,122]),o($Vk,[2,123]),o($Vk,[2,124]),o($Vk,[2,125]),{1:[2,1]},o($Ve,[2,4]),o($Ve,[2,39]),o($Ve,[2,40]),{21:[1,57],55:[1,56],67:[1,58]},o($Vl,[2,74],{100:[1,59]}),{23:71,31:$Vm,32:60,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{53:[1,83]},{54:[1,84]},{23:71,31:$Vm,32:89,33:[1,86],47:63,52:$Vn,54:$Vo,56:88,59:$V6,61:87,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$V9,77:$Va,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,94:85,96:$Vb,97:$Vc,104:$Vy,105:$Vz},{23:71,31:$Vm,32:90,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:89,47:63,52:$Vn,54:$Vo,61:91,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:89,47:63,52:$Vn,54:$Vo,61:92,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:93,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:94,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:96,47:95,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{10:98,50:97,52:[1,100],59:[1,99]},{46:[1,101]},{6:102,7:104,9:105,10:106,11:107,12:108,13:109,14:110,15:111,16:112,17:113,18:114,19:115,20:$VA,22:117,23:118,24:119,25:120,26:121,27:122,30:$V0,38:[1,103],39:$V1,46:$V2,48:$V3,49:$V4,52:$VB,56:21,59:$V6,60:$V7,62:$V8,76:$V9,77:$Va,96:$Vb,97:$Vc,98:$VC},{31:[1,125]},{23:71,31:$Vm,32:126,47:63,52:$Vn,54:$Vo,58:127,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($VD,[2,64]),{52:[1,128]},{101:[1,129]},{21:[1,130],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{23:71,31:$Vm,32:145,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:146,47:63,52:$Vn,54:$Vo,59:[1,147],63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:[1,148],77:[1,149],78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($VS,$VT),o($VS,[2,86]),o($VS,[2,87]),o($VS,[2,88]),o($VS,[2,89]),o($VS,[2,90],{31:[1,150],100:[1,151]}),o($VS,[2,94]),o($VS,[2,95]),o($VS,[2,96]),o($VS,[2,97]),o($VS,[2,98]),o($VS,[2,99]),o($VS,[2,100]),o($VS,[2,101]),o($VS,[2,102]),{23:71,31:$Vm,32:152,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{31:[1,153]},{31:[1,154]},{31:[1,155]},{31:[1,156]},{21:[1,157]},{21:[1,158]},{33:[1,159],67:[1,160]},{21:[2,130],44:$VU},{33:[1,162],67:$VV},{52:[1,164]},o($VW,[2,72],{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR}),{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR,101:[1,165]},{33:[1,166],67:$VV},{33:[1,167],67:$VV},{33:[1,168],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{33:[1,169],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},o($VX,$VT,{33:[1,170]}),{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{23:71,31:$Vm,32:96,47:171,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:96,47:172,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{52:[1,173]},{55:$Vh},{31:[1,174]},{7:176,9:105,10:106,11:107,12:108,13:109,14:110,15:111,16:112,17:113,18:114,19:115,20:$VA,22:117,23:118,24:119,25:120,26:121,27:122,30:$V0,38:[1,175],39:$V1,46:$V2,48:$V3,49:$V4,52:$VB,56:21,59:$V6,60:$V7,62:$V8,76:$V9,77:$Va,96:$Vb,97:$Vc,98:$VC},o($VY,[2,46]),o($VZ,[2,3]),o($VZ,[2,6]),o($VZ,[2,7]),o($VZ,[2,8]),o($VZ,[2,9]),o($VZ,[2,10]),o($VZ,[2,11]),o($VZ,[2,12]),o($VZ,[2,13]),o($VZ,[2,14]),o($VZ,[2,15]),o($VZ,[2,16]),{21:[1,177]},o($VZ,[2,18]),{21:[1,178]},o($VZ,[2,20]),o($VZ,[2,21]),o($VZ,[2,22]),o($VZ,[2,23]),{31:[1,179],53:$Vf,54:$Vg,55:$Vh,100:$Vi},{23:71,31:$Vm,32:180,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:89,33:[1,182],47:63,52:$Vn,54:$Vo,61:181,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{21:[1,183],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR,93:[1,184]},{21:[1,185]},o($Vl,[2,73]),{55:[1,186],100:[1,187]},o([5,20,30,31,38,39,43,45,46,48,49,52,54,59,60,62,64,66,72,73,74,75,76,77,82,83,90,96,97,98,99,104,105],[2,65]),{23:71,31:$Vm,32:188,47:63,52:$Vn,53:[1,189],54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:190,47:63,52:$Vn,54:[1,191],63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:192,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:193,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:194,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:195,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:196,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:197,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:198,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:199,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:200,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:201,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:202,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:203,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($VS,[2,75]),{33:[1,204],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{33:[1,205]},{33:[1,206]},{33:[1,207]},{23:71,31:$Vm,32:89,33:[1,209],47:63,52:$Vn,54:$Vo,61:208,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:210,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($VS,[2,109]),{23:71,31:$Vm,32:211,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:212,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:213,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:214,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($VD,[2,113]),o($VD,[2,114]),{44:[1,215]},{56:216,59:$V6,76:$V9,77:$Va,96:$Vb,97:$Vc},{56:217,59:$V6,76:$V9,77:$Va,95:[1,218],96:$Vb,97:$Vc},{21:[2,129]},{23:71,31:$Vm,32:219,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($V_,[2,120]),{55:[1,220],100:[1,221]},{21:[1,222]},{21:[1,223]},{34:224,37:$Vj},{37:[1,225]},{34:226,37:$Vj},o($VX,$VT,{21:[1,227]}),o($VX,$VT,{21:[1,228]}),{55:[1,229]},{23:71,31:$Vm,32:96,47:230,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($VY,[2,45]),o($VZ,[2,2]),o($VZ,[2,17]),o($VZ,[2,19]),{23:71,31:$Vm,32:89,33:[1,231],47:63,52:$Vn,54:$Vo,56:88,59:$V6,61:208,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$V9,77:$Va,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,94:85,96:$Vb,97:$Vc,104:$Vy,105:$Vz},{21:[1,232],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{33:[1,233],67:$VV},{21:[2,132]},o($VD,[2,62]),{23:71,31:$Vm,32:234,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($VD,[2,63]),{100:[1,235],102:[1,236]},{101:[1,237]},o($V$,[2,76],{68:$VG,69:$VH,70:$VI}),o($VS,[2,83]),o($V$,[2,77],{68:$VG,69:$VH,70:$VI}),o($VS,[2,84],{47:63,63:69,65:70,23:71,78:72,79:73,80:74,81:75,32:145,31:$Vm,52:$Vn,64:$Vp,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz}),o($V01,[2,78],{70:$VI}),o($V01,[2,79],{70:$VI}),o($V01,[2,80]),o([21,33,44,67,71,84,85,86,87,88,89,91,92,93,101],[2,81],{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI}),o($V11,[2,103],{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o($V11,[2,104],{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o($V11,[2,105],{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o($V11,[2,106],{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o($V11,[2,107],{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o($V11,[2,108],{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o([21,33,44,67,91,93,101],[2,110],{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,92:$VR}),o([21,33,44,67,91,92,93,101],[2,111],{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP}),o($VS,[2,82]),{23:71,31:$Vm,32:238,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:239,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:240,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{33:[1,241],67:$VV},o($VS,$V21),{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR,101:[1,242]},{33:[1,243],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{33:[1,244],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{33:[1,245],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{33:[1,246],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{56:247,59:$V6,76:$V9,77:$Va,95:[1,248],96:$Vb,97:$Vc},{52:[1,249]},{34:250,37:$Vj},{34:251,37:$Vj},o($VW,[2,71],{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR}),{23:71,31:$Vm,32:252,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{23:71,31:$Vm,32:253,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($VD,[2,67]),o($VD,[2,68]),o($VD,[2,44],{35:254,36:[1,255]}),{40:256,41:257,42:258,43:$V31,45:$V41},o($VD,[2,55]),{51:261,52:$V51},{51:263,52:$V51},{23:71,31:$Vm,32:264,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($VX,$VT,{33:[1,265]}),{21:$V21,44:$VU},o($VZ,[2,126]),{21:[2,131]},{44:[1,266],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{23:71,31:$Vm,32:89,47:63,52:$Vn,54:$Vo,61:267,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{56:268,59:$V6,76:$V9,77:$Va,96:$Vb,97:$Vc},{55:[1,269]},o($VS,[2,91]),o($VS,[2,92]),o($VS,[2,93]),o($VS,[2,127]),o($VS,[2,135],{100:[1,270]}),o($VS,[2,69]),o($VS,[2,70]),o($VS,[2,143]),o($VS,[2,144]),{34:271,37:$Vj},{34:272,37:$Vj},o($V_,[2,119]),o($VD,[2,116]),o($VD,[2,118]),{21:[1,273],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR,101:[1,274]},o($VD,[2,41]),{13:276,30:$V0,34:275,37:$Vj},{38:[1,278],41:277,42:279,43:$V31,45:$V41},{38:[1,280]},o($V61,[2,51]),{44:[1,281]},{23:71,31:$Vm,32:282,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{33:[1,283]},{53:[1,284],54:[1,285],55:[1,286]},{33:[1,287]},{21:[1,288],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},o($VD,[2,56]),{23:71,31:$Vm,32:289,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{67:$VV,101:[1,290]},{100:[1,291]},{100:[1,292],102:[1,293]},{23:71,31:$Vm,32:294,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($VD,[2,115]),o($VD,[2,117]),o($VD,[2,136]),{55:[1,295]},o($VD,[2,42]),o($VD,[2,43]),{38:[1,296]},o($VD,[2,48]),o($V61,[2,50]),o($VD,[2,49]),{6:297,7:104,9:105,10:106,11:107,12:108,13:109,14:110,15:111,16:112,17:113,18:114,19:115,20:$VA,22:117,23:118,24:119,25:120,26:121,27:122,30:$V0,39:$V1,46:$V2,48:$V3,49:$V4,52:$VB,56:21,59:$V6,60:$V7,62:$V8,76:$V9,77:$Va,96:$Vb,97:$Vc,98:$VC},{44:[1,298],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{34:299,37:$Vj},{53:[1,300]},{54:[1,301]},{23:71,31:$Vm,32:302,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{34:303,37:$Vj},o([31,52,54,64,66,72,73,74,75,82,83,90,104,105],[2,66]),{21:[2,112],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},{21:[1,304]},{23:71,31:$Vm,32:305,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{100:[1,307],103:306},{56:308,59:$V6,76:$V9,77:$Va,96:$Vb,97:$Vc},{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR,101:[1,309]},{23:71,31:$Vm,32:310,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($VD,[2,47]),{7:176,9:105,10:106,11:107,12:108,13:109,14:110,15:111,16:112,17:113,18:114,19:115,20:$VA,22:117,23:118,24:119,25:120,26:121,27:122,30:$V0,38:[2,54],39:$V1,46:$V2,48:$V3,49:$V4,52:$VB,56:21,59:$V6,60:$V7,62:$V8,76:$V9,77:$Va,96:$Vb,97:$Vc,98:$VC},o($V61,[2,53],{56:21,7:104,9:105,10:106,11:107,12:108,13:109,14:110,15:111,16:112,17:113,18:114,19:115,22:117,23:118,24:119,25:120,26:121,27:122,6:311,20:$VA,30:$V0,39:$V1,46:$V2,48:$V3,49:$V4,52:$VB,59:$V6,60:$V7,62:$V8,76:$V9,77:$Va,96:$Vb,97:$Vc,98:$VC}),o($VD,[2,57]),{33:[2,59]},{33:[2,60]},{33:[2,61],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},o($VD,[2,58]),o($VD,[2,133]),{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR,101:[1,312]},{67:[1,314],101:[1,313]},{23:71,31:$Vm,32:89,47:63,52:$Vn,54:$Vo,61:315,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{100:[1,316]},o($VS,[2,139]),{21:[1,317],53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR},o($V61,[2,52],{56:21,9:105,10:106,11:107,12:108,13:109,14:110,15:111,16:112,17:113,18:114,19:115,22:117,23:118,24:119,25:120,26:121,27:122,7:176,20:$VA,30:$V0,39:$V1,46:$V2,48:$V3,49:$V4,52:$VB,59:$V6,60:$V7,62:$V8,76:$V9,77:$Va,96:$Vb,97:$Vc,98:$VC}),{21:[1,318]},{21:[1,319]},{100:[1,320]},{67:$VV,101:[1,321]},{23:71,31:$Vm,32:322,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($VD,[2,140]),o($VD,[2,134]),o($VD,[2,137]),{23:71,31:$Vm,32:89,47:63,52:$Vn,54:$Vo,61:323,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},o($V71,[2,142]),{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR,101:[1,324]},{67:$VV,101:[1,325]},{100:[1,326]},o($V71,[2,141]),{23:71,31:$Vm,32:327,47:63,52:$Vn,54:$Vo,63:69,64:$Vp,65:70,66:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,78:72,79:73,80:74,81:75,82:$Vv,83:$Vw,90:$Vx,104:$Vy,105:$Vz},{53:$VE,54:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,91:$VQ,92:$VR,101:[1,328]},{21:[1,329]},o($VD,[2,138])],
defaultActions: {36:[2,1],162:[2,129],182:[2,132],233:[2,131],300:[2,59],301:[2,60]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Aritmetica, TipoAritmetico} = require("../Expresion/Aritmetica")
    const {Literal, TipoLiteral} = require("../Expresion/Literal")
    const {Relacional, TipoRelacional} = require("../Expresion/Relacional")
    const {Ternario} = require("../Expresion/Ternario")
    const {Casteo} = require("../Expresion/Casteo")
    const {Declaracion} = require("../Instruccion/Declaracion")
    const {Print} = require('../Instruccion/Print')
    const {Acceso} = require('../Expresion/Acceso')
    const {Type} = require('../Expresion/Retorno')
    const {If} = require("../Instruccion/If")
    const {Statement} = require("../Instruccion/Statement")
    const {Switch} = require("../Instruccion/Switch")
    const {Case} = require("../Instruccion/Case")
    const {Break} = require("../Instruccion/Break")
    const {While} = require("../Instruccion/While")
    const {Continue} = require("../Instruccion/Continue")
    const { Program }= require( "../Misc/Program")
    const {DoWhile} = require("../Instruccion/DoWhile")
    const {ToUpper} = require("../Instruccion/ToUpper")
    const {ToLower} = require("../Instruccion/ToLower")
    const {Length} = require("../Instruccion/Length")
    const {TypeOf} = require("../Instruccion/TypeOf")
    const {For} = require("../Instruccion/For")
    const {Parametro} = require("../Misc/Parametro")
    const {Return} = require("../Instruccion/Return")
    const {Funcion} = require("../Instruccion/Funcion")
    const {Llamada} = require("../Instruccion/Llamada")
    const {Error_} = require("../Error/Error")

    const {DeclararVector1, DeclararVector2} = require("../Instruccion/DeclararVector")
    const {ModVector1, ModVector2} = require("../Instruccion/ModVector")
    const {AccesoVector1, AccesoVector2} = require("../Expresion/AccesoVector")

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 62; 
break;
case 4:return 60; 
break;
case 5:return 82; 
break;
case 6:return 83; 
break;
case 7:return 59; 
break;
case 8:return 96; 
break;
case 9:return 77; 
break;
case 10:return 97; 
break;
case 11:return 76; 
break;
case 12:return 30;
break;
case 13:return 36;
break;
case 14:return 39;
break;
case 15:return 43;
break;
case 16:return 45;
break;
case 17:return 20;
break;
case 18:return 46;
break;
case 19:return 'TK_CONTINUE';
break;
case 20:return 48;
break;
case 21:return 49;
break;
case 22:return 98;
break;
case 23:return 95;
break;
case 24:return 102;
break;
case 25:return 99;
break;
case 26:return 64;
break;
case 27:return 66;
break;
case 28:return 104;
break;
case 29:return 105;
break;
case 30: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 74; 
break;
case 31: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75; 
break;
case 32:return 73;
break;
case 33:return 72;
break;
case 34:return 52;
break;
case 35:return 31;
break;
case 36:return 33;
break;
case 37:return 37;
break;
case 38:return 38;
break;
case 39:return 100;
break;
case 40:return 101;
break;
case 41:return 21;
break;
case 42:return 44; 
break;
case 43:return 67;
break;
case 44:return 53;
break;
case 45:return 54;
break;
case 46:return 68;
break;
case 47:return 69;
break;
case 48:return 70;
break;
case 49:return 71;
break;
case 50:return 88;
break;
case 51:return 86;
break;
case 52:return 87;
break;
case 53:return 84;
break;
case 54:return 85;
break;
case 55:return 55;
break;
case 56:return 89;
break;
case 57:return 90;
break;
case 58:return 91; 
break;
case 59:return 92;
break;
case 60:return 93; 
break;
case 61: new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, "Lexico", "El carecter '" + yy_.yytext + "' no pertenece al lenguaje"); 
break;
case 62:return 5;
break;
}
},
rules: [/^(?:[\r\t\n\s]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:doble\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:continue\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:run\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:TypeOf\b)/i,/^(?:[\"]([^\\\"\\\n]|\\.)*[\"])/i,/^(?:'[^\']')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}