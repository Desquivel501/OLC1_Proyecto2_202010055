/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[5,12,20,21,25,27,28,32,33,34,35,37,38,40],$Vb=[1,22],$Vc=[1,36],$Vd=[30,31,41],$Ve=[1,47],$Vf=[1,55],$Vg=[1,46],$Vh=[1,48],$Vi=[1,49],$Vj=[1,50],$Vk=[1,51],$Vl=[1,52],$Vm=[1,53],$Vn=[1,54],$Vo=[1,76],$Vp=[1,75],$Vq=[1,77],$Vr=[1,78],$Vs=[1,79],$Vt=[1,80],$Vu=[1,81],$Vv=[1,82],$Vw=[1,83],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[15,26,31,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,63],$VD=[1,98],$VE=[15,41],$VF=[1,103],$VG=[1,137],$VH=[15,26,31,41,42,43,47,48,49,50,51,52,53,55,56,63],$VI=[15,26,31,41,42,43,44,45,47,48,49,50,51,52,53,55,56,63],$VJ=[15,26,31,41,48,49,50,51,52,53,55,56,63],$VK=[1,151],$VL=[1,150],$VM=[5,12,18,20,21,25,27,28,32,33,34,35,37,38,40],$VN=[20,25,27];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"print":8,"unaria":9,"if":10,"switch":11,"TK_IF":12,"TK_PARIZQ":13,"expresion":14,"TK_PARDER":15,"statement":16,"else":17,"TK_ELSE":18,"TK_LLAVIZQ":19,"TK_LLAVDER":20,"TK_SWITCH":21,"case_list":22,"default":23,"case":24,"TK_CASE":25,"TK_DOSPTS":26,"TK_DEFAULT":27,"TK_INT":28,"listaIdentificador":29,"TK_IGUAL":30,"TK_PTCOMA":31,"TK_DOBLE":32,"TK_CHAR":33,"TK_STRING":34,"TK_BOOLEAN":35,"ternario":36,"IDENTIFICADOR":37,"TK_PRINT":38,"listaExpresion":39,"TK_PRINTLN":40,"TK_COMA":41,"TK_RESTA":42,"TK_SUMA":43,"TK_POR":44,"TK_DIVIDIR":45,"TK_POTENCIA":46,"TK_MODULO":47,"TK_MENOR":48,"TK_MAYOR":49,"TK_MENORIG":50,"TK_MAYORIG":51,"TK_DOBLEIG":52,"TK_NOIG":53,"TK_NOT":54,"TK_OR":55,"TK_AND":56,"ENTERO":57,"DECIMAL":58,"TK_TRUE":59,"TK_FALSE":60,"CADENA":61,"CHAR":62,"TK_INTE":63,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"TK_IF",13:"TK_PARIZQ",15:"TK_PARDER",18:"TK_ELSE",19:"TK_LLAVIZQ",20:"TK_LLAVDER",21:"TK_SWITCH",25:"TK_CASE",26:"TK_DOSPTS",27:"TK_DEFAULT",28:"TK_INT",30:"TK_IGUAL",31:"TK_PTCOMA",32:"TK_DOBLE",33:"TK_CHAR",34:"TK_STRING",35:"TK_BOOLEAN",37:"IDENTIFICADOR",38:"TK_PRINT",40:"TK_PRINTLN",41:"TK_COMA",42:"TK_RESTA",43:"TK_SUMA",44:"TK_POR",45:"TK_DIVIDIR",46:"TK_POTENCIA",47:"TK_MODULO",48:"TK_MENOR",49:"TK_MAYOR",50:"TK_MENORIG",51:"TK_MAYORIG",52:"TK_DOBLEIG",53:"TK_NOIG",54:"TK_NOT",55:"TK_OR",56:"TK_AND",57:"ENTERO",58:"DECIMAL",59:"TK_TRUE",60:"TK_FALSE",61:"CADENA",62:"CHAR",63:"TK_INTE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[10,6],[17,2],[17,2],[17,0],[16,3],[16,2],[11,8],[11,7],[11,7],[22,2],[22,1],[24,4],[24,3],[23,3],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,3],[7,3],[7,3],[7,3],[7,3],[7,4],[8,5],[8,5],[39,3],[39,1],[29,3],[29,1],[14,2],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,2],[14,3],[14,3],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,4],[14,4],[14,4],[36,5],[9,4],[9,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    return $$[$0-1]

break;
case 2: case 18:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 19:
 this.$ = [$$[$0]]; 
break;
case 9:
this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 10: case 11:
this.$ = $$[$0]
break;
case 12:
this.$ = null
break;
case 13:
this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 14:
this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 15:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 16:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 17:
this.$ = new Switch($$[$0-4], null, $$[$0], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 20:
this.$ = new Case($$[$0-2], new Statement($$[$0], _$[$0-3].first_line, _$[$0-3].first_column), _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 21:
this.$ = new Case($$[$0-1], new Statement([], _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 22:
this.$ = new Statement($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 23: case 28:
this.$ = new Declaracion(Type.NUMBER, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 24: case 29:
this.$ = new Declaracion(Type.DOBLE, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 25: case 30:
this.$ = new Declaracion(Type.CHAR, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 26: case 31:
this.$ = new Declaracion(Type.STRING, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 27: case 32:
this.$ = new Declaracion(Type.BOOLEAN, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 33:
this.$ = new Declaracion(Type.NUMBER, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 34:
this.$ = new Declaracion(Type.DOBLE, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 35:
this.$ = new Declaracion(Type.CHAR, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 36:
this.$ = new Declaracion(Type.STRING, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 37:
this.$ = new Declaracion(Type.BOOLEAN, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 38:
this.$ = new Declaracion(-1, [$$[$0-3]], $$[$0-1], false,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 39:
this.$ = new Print($$[$0-2],false, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 40:
this.$ = new Print($$[$0-2],true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 41: case 43:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 42: case 44:
this.$ = [$$[$0]]
break;
case 45:
this.$ = new Aritmetica(new Literal("-1", TipoLiteral.NUMBER, _$[$0-1].first_line,  _$[$0-1].first_column), $$[$0], TipoAritmetico.MULTIPLICACION, _$[$0-1].first_line,  _$[$0-1].first_column)
break;
case 46:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.SUMA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 47:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.RESTA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 48:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MULTIPLICACION, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 49:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.DIVISION, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 50:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.POTENCIA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 51:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MODULO, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 52:
this.$ = $$[$0-1]
break;
case 53:
this.$ = new Aritmetica($$[$0-2], $$[$0-2], TipoAritmetico.INCRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 54:
this.$ = new Aritmetica($$[$0-2], $$[$0-2], TipoAritmetico.DECRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 55:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 56:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 57:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 58:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 59:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.IGUAL_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 60:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.DIFERENTE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 61:
this.$ = new Relacional($$[$0], $$[$0], TipoRelacional.NOT, _$[$0-1].first_line,  _$[$0-1].first_column)
break;
case 62:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.OR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 63:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.AND, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 64:
this.$ = new Literal($$[$0], TipoLiteral.NUMBER, _$[$0].first_line,  _$[$0].first_column)
break;
case 65:
this.$ = new Literal($$[$0], TipoLiteral.DOBLE, _$[$0].first_line,  _$[$0].first_column)
break;
case 66: case 67:
this.$ = new Literal($$[$0], TipoLiteral.BOOLEAN, _$[$0].first_line,  _$[$0].first_column)
break;
case 68:
this.$ = new Literal($$[$0], TipoLiteral.STRING, _$[$0].first_line,  _$[$0].first_column)
break;
case 69:
this.$ = new Literal($$[$0], TipoLiteral.CHAR, _$[$0].first_line,  _$[$0].first_column)
break;
case 70:
this.$= new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column)
break;
case 71:
this.$ = new Casteo(Type.NUMBER,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 72:
this.$ = new Casteo(Type.DOBLE,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 73:
this.$ = new Casteo(Type.CHAR,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 74:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line,  _$[$0-4].first_column)
break;
case 75:
this.$ = new Declaracion(-1, [$$[$0-3]], new Aritmetica(new Acceso($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column), null, TipoAritmetico.INCRE, _$[$0-3].first_line,  _$[$0-3].first_column), false, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 76:
this.$ = new Declaracion(-1, [$$[$0-3]], new Aritmetica(new Acceso($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column), null, TipoAritmetico.DECRE, _$[$0-3].first_line,  _$[$0-3].first_column), false, _$[$0-3].first_line, _$[$0-3].first_column)
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,21:$V1,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,37:$V7,38:$V8,40:$V9},{1:[3]},{5:[1,19],6:20,7:4,8:5,9:6,10:7,11:8,12:$V0,21:$V1,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,37:$V7,38:$V8,40:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),{29:21,37:$Vb},{29:23,37:$Vb},{29:24,37:$Vb},{29:25,37:$Vb},{29:26,37:$Vb},{30:[1,27],42:[1,29],43:[1,28]},{13:[1,30]},{13:[1,31]},{13:[1,32]},{13:[1,33]},{1:[2,1]},o($Va,[2,2]),{30:[1,34],31:[1,35],41:$Vc},o($Vd,[2,44]),{30:[1,37],31:[1,38],41:$Vc},{30:[1,39],31:[1,40],41:$Vc},{30:[1,41],31:[1,42],41:$Vc},{30:[1,43],31:[1,44],41:$Vc},{13:$Ve,14:45,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{43:[1,56]},{42:[1,57]},{13:$Ve,14:59,37:$Vf,39:58,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:59,37:$Vf,39:60,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:61,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:62,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:63,36:64,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($Va,[2,33]),{37:[1,65]},{13:$Ve,14:66,36:67,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($Va,[2,34]),{13:$Ve,14:68,36:69,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($Va,[2,35]),{13:$Ve,14:70,36:71,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($Va,[2,36]),{13:$Ve,14:72,36:73,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($Va,[2,37]),{31:[1,74],42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB},{13:$Ve,14:89,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:90,28:[1,91],32:[1,92],33:[1,93],37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:94,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($VC,[2,64]),o($VC,[2,65]),o($VC,[2,66]),o($VC,[2,67]),o($VC,[2,68]),o($VC,[2,69]),o($VC,[2,70]),{31:[1,95]},{31:[1,96]},{15:[1,97],41:$VD},o($VE,[2,42],{42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB}),{15:[1,99],41:$VD},{15:[1,100],42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB},{15:[1,101],42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB},{31:[1,102],42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB,63:$VF},{31:[1,104]},o($Vd,[2,43]),{31:[1,105],42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB,63:$VF},{31:[1,106]},{31:[1,107],42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB,63:$VF},{31:[1,108]},{31:[1,109],42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB,63:$VF},{31:[1,110]},{31:[1,111],42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB,63:$VF},{31:[1,112]},o($Va,[2,38]),{13:$Ve,14:113,37:$Vf,42:$Vg,43:[1,114],54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:115,37:$Vf,42:[1,116],54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:117,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:118,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:119,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:120,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:121,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:122,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:123,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:124,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:125,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:126,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:127,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:128,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($VC,[2,45]),{15:[1,129],42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB},{15:[1,130]},{15:[1,131]},{15:[1,132]},o($VC,[2,61]),o($Va,[2,75]),o($Va,[2,76]),{31:[1,133]},{13:$Ve,14:134,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{31:[1,135]},{16:136,19:$VG},{19:[1,138]},o($Va,[2,23]),{13:$Ve,14:139,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($Va,[2,28]),o($Va,[2,24]),o($Va,[2,29]),o($Va,[2,25]),o($Va,[2,30]),o($Va,[2,26]),o($Va,[2,31]),o($Va,[2,27]),o($Va,[2,32]),o($VH,[2,46],{44:$Vq,45:$Vr,46:$Vs}),o($VC,[2,53]),o($VH,[2,47],{44:$Vq,45:$Vr,46:$Vs}),o($VC,[2,54],{14:89,13:$Ve,37:$Vf,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn}),o($VI,[2,48],{46:$Vs}),o($VI,[2,49],{46:$Vs}),o($VI,[2,50]),o([15,26,31,41,47,48,49,50,51,52,53,55,56,63],[2,51],{42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs}),o($VJ,[2,55],{42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt}),o($VJ,[2,56],{42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt}),o($VJ,[2,57],{42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt}),o($VJ,[2,58],{42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt}),o($VJ,[2,59],{42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt}),o($VJ,[2,60],{42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt}),o([15,26,31,41,55,63],[2,62],{42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,56:$VB}),o([15,26,31,41,55,56,63],[2,63],{42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz}),o($VC,[2,52]),{13:$Ve,14:140,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:141,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:142,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($Va,[2,39]),o($VE,[2,41],{42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB}),o($Va,[2,40]),o($Va,[2,12],{17:143,18:[1,144]}),{4:145,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,20:[1,146],21:$V1,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,37:$V7,38:$V8,40:$V9},{22:147,23:148,24:149,25:$VK,27:$VL},{26:[1,152],42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB},o($VC,[2,71]),o($VC,[2,72]),o($VC,[2,73]),o($Va,[2,9]),{10:154,12:$V0,16:153,19:$VG},{6:20,7:4,8:5,9:6,10:7,11:8,12:$V0,20:[1,155],21:$V1,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,37:$V7,38:$V8,40:$V9},o($VM,[2,14]),{20:[1,157],23:156,24:158,25:$VK,27:$VL},{20:[1,159]},o($VN,[2,19]),{26:[1,160]},{13:$Ve,14:161,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:$Ve,14:162,37:$Vf,42:$Vg,54:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($Va,[2,10]),o($Va,[2,11]),o($VM,[2,13]),{20:[1,163]},o($Va,[2,16]),o($VN,[2,18]),o($Va,[2,17]),{4:164,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,21:$V1,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,37:$V7,38:$V8,40:$V9},{26:[1,165],42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB},{31:[2,74],42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB},o($Va,[2,15]),{6:20,7:4,8:5,9:6,10:7,11:8,12:$V0,20:[2,22],21:$V1,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,37:$V7,38:$V8,40:$V9},o($VN,[2,21],{6:3,7:4,8:5,9:6,10:7,11:8,4:166,12:$V0,21:$V1,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,37:$V7,38:$V8,40:$V9}),o($VN,[2,20],{7:4,8:5,9:6,10:7,11:8,6:20,12:$V0,21:$V1,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,37:$V7,38:$V8,40:$V9})],
defaultActions: {19:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Aritmetica, TipoAritmetico} = require("../Expresion/Aritmetica")
    const {Literal, TipoLiteral} = require("../Expresion/Literal")
    const {Relacional, TipoRelacional} = require("../Expresion/Relacional")
    const {Ternario} = require("../Expresion/Ternario")
    const {Casteo} = require("../Expresion/Casteo")
    const {Declaracion} = require("../Instruccion/Declaracion")
    const {Print} = require('../Instruccion/Print')
    const {Acceso} = require('../Expresion/Acceso')
    const {Type} = require('../Expresion/Retorno')
    const {If} = require("../Instruccion/If")
    const {Statement} = require("../Instruccion/Statement")
    const {Switch} = require("../Instruccion/Switch")
    const {Case} = require("../Instruccion/Case")

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 40; 
break;
case 4:return 38; 
break;
case 5:return 59; 
break;
case 6:return 60; 
break;
case 7:return 28; 
break;
case 8:return 34; 
break;
case 9:return 33; 
break;
case 10:return 35; 
break;
case 11:return 32; 
break;
case 12:return 12;
break;
case 13:return 18;
break;
case 14:return 21;
break;
case 15:return 25;
break;
case 16:return 27;
break;
case 17:return 'TK_BREAK';
break;
case 18: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 61; 
break;
case 19: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 20:return 58;
break;
case 21:return 57;
break;
case 22:return 37;
break;
case 23:return 13;
break;
case 24:return 15;
break;
case 25:return 19;
break;
case 26:return 20;
break;
case 27:return 31;
break;
case 28:return 26; 
break;
case 29:return 41;
break;
case 30:return 43;
break;
case 31:return 42;
break;
case 32:return 44;
break;
case 33:return 45;
break;
case 34:return 46;
break;
case 35:return 47;
break;
case 36:return 52;
break;
case 37:return 50;
break;
case 38:return 51;
break;
case 39:return 48;
break;
case 40:return 49;
break;
case 41:return 30;
break;
case 42:return 53;
break;
case 43:return 54;
break;
case 44:return 55; 
break;
case 45:return 56;
break;
case 46:return 63; 
break;
case 47: console.error('Error Lexico: ' + yy_.yytext + ' (Linea: ' + yy_.yylloc.first_line + ', Columna: ' + yy_.yylloc.first_column +")"); 
break;
case 48:return 5;
break;
}
},
rules: [/^(?:[\r\t\n\s]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:doble\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}