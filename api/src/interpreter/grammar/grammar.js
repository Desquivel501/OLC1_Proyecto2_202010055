/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,22],$V2=[1,23],$V3=[1,24],$V4=[1,26],$V5=[1,25],$V6=[1,19],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,20],$Vd=[1,21],$Ve=[5,16,18,26,27,31,33,34,36,37,40,44,46,47,48,49,51,53],$Vf=[1,31],$Vg=[1,36],$Vh=[1,48],$Vi=[17,43,58],$Vj=[1,59],$Vk=[1,67],$Vl=[1,58],$Vm=[1,71],$Vn=[1,72],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,70],$Vv=[1,100],$Vw=[1,101],$Vx=[1,102],$Vy=[1,103],$Vz=[1,104],$VA=[1,105],$VB=[1,106],$VC=[1,107],$VD=[1,108],$VE=[1,109],$VF=[1,110],$VG=[1,111],$VH=[1,112],$VI=[1,113],$VJ=[17,21,32,41,42,58,59,60,61,62,69,70,71,72,73,74,76,77,78],$VK=[2,72],$VL=[1,125],$VM=[21,58],$VN=[41,42,59,60,61,62,69,70,71,72,73,74,76,77],$VO=[1,136],$VP=[1,172],$VQ=[17,21,32,41,42,58,62,69,70,71,72,73,74,76,77,78],$VR=[17,21,32,41,42,58,59,60,62,69,70,71,72,73,74,76,77,78],$VS=[17,21,32,58,69,70,71,72,73,74,76,77,78],$VT=[1,194],$VU=[1,193],$VV=[1,198],$VW=[5,16,18,24,26,27,31,33,34,36,37,40,44,46,47,48,49,51,53],$VX=[26,31,33];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"print":9,"unaria":10,"if":11,"switch":12,"while":13,"for":14,"do_while":15,"TK_BREAK":16,"TK_PTCOMA":17,"TK_IF":18,"TK_PARIZQ":19,"expresion":20,"TK_PARDER":21,"statement":22,"else":23,"TK_ELSE":24,"TK_LLAVIZQ":25,"TK_LLAVDER":26,"TK_SWITCH":27,"case_list":28,"default":29,"case":30,"TK_CASE":31,"TK_DOSPTS":32,"TK_DEFAULT":33,"TK_WHILE":34,"condicion":35,"TK_DO":36,"TK_FOR":37,"dec_for":38,"actualizacion":39,"IDENTIFICADOR":40,"TK_SUMA":41,"TK_RESTA":42,"TK_IGUAL":43,"TK_INT":44,"listaIdentificador":45,"TK_DOBLE":46,"TK_CHAR":47,"TK_STRING":48,"TK_BOOLEAN":49,"ternario":50,"TK_PRINT":51,"listaExpresion":52,"TK_PRINTLN":53,"to_lower":54,"TK_LOWER":55,"to_upper":56,"TK_UPPER":57,"TK_COMA":58,"TK_POR":59,"TK_DIVIDIR":60,"TK_POTENCIA":61,"TK_MODULO":62,"ENTERO":63,"DECIMAL":64,"TK_TRUE":65,"TK_FALSE":66,"CADENA":67,"CHAR":68,"TK_MENOR":69,"TK_MAYOR":70,"TK_MENORIG":71,"TK_MAYORIG":72,"TK_DOBLEIG":73,"TK_NOIG":74,"TK_NOT":75,"TK_OR":76,"TK_AND":77,"TK_INTE":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"TK_BREAK",17:"TK_PTCOMA",18:"TK_IF",19:"TK_PARIZQ",21:"TK_PARDER",24:"TK_ELSE",25:"TK_LLAVIZQ",26:"TK_LLAVDER",27:"TK_SWITCH",31:"TK_CASE",32:"TK_DOSPTS",33:"TK_DEFAULT",34:"TK_WHILE",36:"TK_DO",37:"TK_FOR",40:"IDENTIFICADOR",41:"TK_SUMA",42:"TK_RESTA",43:"TK_IGUAL",44:"TK_INT",46:"TK_DOBLE",47:"TK_CHAR",48:"TK_STRING",49:"TK_BOOLEAN",51:"TK_PRINT",53:"TK_PRINTLN",55:"TK_LOWER",57:"TK_UPPER",58:"TK_COMA",59:"TK_POR",60:"TK_DIVIDIR",61:"TK_POTENCIA",62:"TK_MODULO",63:"ENTERO",64:"DECIMAL",65:"TK_TRUE",66:"TK_FALSE",67:"CADENA",68:"CHAR",69:"TK_MENOR",70:"TK_MAYOR",71:"TK_MENORIG",72:"TK_MAYORIG",73:"TK_DOBLEIG",74:"TK_NOIG",75:"TK_NOT",76:"TK_OR",77:"TK_AND",78:"TK_INTE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[11,6],[23,2],[23,2],[23,0],[22,3],[22,2],[12,8],[12,7],[12,7],[28,2],[28,1],[30,4],[30,3],[29,3],[13,7],[13,6],[15,8],[15,7],[14,8],[14,8],[39,3],[39,3],[39,3],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,3],[7,3],[7,3],[7,3],[7,3],[8,4],[38,5],[9,5],[9,5],[54,4],[56,4],[52,3],[52,1],[45,3],[45,1],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,4],[20,4],[20,4],[20,1],[20,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,3],[35,3],[50,5],[10,4],[10,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    return $$[$0-1]

break;
case 2: case 23:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 24:
 this.$ = [$$[$0]]; 
break;
case 13:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 14:
this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 15: case 16: case 36:
this.$ = $$[$0]
break;
case 17:
this.$ = null
break;
case 18:
this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 19:
this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 20:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 21:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 22:
this.$ = new Switch($$[$0-4], null, $$[$0], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 25:
this.$ = new Case($$[$0-2], new Statement($$[$0], _$[$0-3].first_line, _$[$0-3].first_column), _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 26:
this.$ = new Case($$[$0-1], new Statement([], _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 27:
this.$ = new Statement($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 28:
this.$ = new While($$[$0-4], new Statement($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column), _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 29:
this.$ = new While($$[$0-3], new Statement([], _$[$0-5].first_line, _$[$0-5].first_column), _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 30:
this.$ = new While($$[$0-1], new Statement($$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column), _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 31:
this.$ = new While($$[$0], new Statement([], _$[$0-6].first_line, _$[$0-6].first_column), _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 32: case 33:
this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 34:
this.$ = new Aritmetica(new Acceso($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column), new Acceso($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column), TipoAritmetico.INCRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 35:
this.$ = new Aritmetica(new Acceso($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column), new Acceso($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column), TipoAritmetico.DECRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 37: case 42:
this.$ = new Declaracion(Type.NUMBER, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 38: case 43:
this.$ = new Declaracion(Type.DOBLE, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 39: case 44:
this.$ = new Declaracion(Type.CHAR, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 40: case 45:
this.$ = new Declaracion(Type.STRING, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 41: case 46:
this.$ = new Declaracion(Type.BOOLEAN, $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 47:
this.$ = new Declaracion(Type.NUMBER, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 48:
this.$ = new Declaracion(Type.DOBLE, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 49:
this.$ = new Declaracion(Type.CHAR, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 50:
this.$ = new Declaracion(Type.STRING, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 51:
this.$ = new Declaracion(Type.BOOLEAN, $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 52:
this.$ = new Declaracion(-1, [$$[$0-3]], $$[$0-1], false,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 53:
this.$ = new Declaracion(Type.NUMBER, [$$[$0-3]], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 54:
this.$ = new Print($$[$0-2],false, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 55:
this.$ = new Print($$[$0-2],true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 56:
this.$ = new ToLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 57:
this.$ = new ToUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 58: case 60:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 59: case 61:
this.$ = [$$[$0]]
break;
case 62:
this.$ = new Aritmetica(new Literal("-1", TipoLiteral.NUMBER, _$[$0-1].first_line,  _$[$0-1].first_column), $$[$0], TipoAritmetico.MULTIPLICACION, _$[$0-1].first_line,  _$[$0-1].first_column)
break;
case 63:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.SUMA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 64:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.RESTA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 65:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MULTIPLICACION, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 66:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.DIVISION, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 67:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.POTENCIA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 68:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MODULO, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 69:
this.$ = $$[$0-1]
break;
case 70:
this.$ = new Aritmetica($$[$0-2], $$[$0-2], TipoAritmetico.INCRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 71:
this.$ = new Aritmetica($$[$0-2], $$[$0-2], TipoAritmetico.DECRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 73:
this.$ = new Literal($$[$0], TipoLiteral.NUMBER, _$[$0].first_line,  _$[$0].first_column)
break;
case 74:
this.$ = new Literal($$[$0], TipoLiteral.DOBLE, _$[$0].first_line,  _$[$0].first_column)
break;
case 75: case 76:
this.$ = new Literal($$[$0], TipoLiteral.BOOLEAN, _$[$0].first_line,  _$[$0].first_column)
break;
case 77:
this.$ = new Literal($$[$0], TipoLiteral.STRING, _$[$0].first_line,  _$[$0].first_column)
break;
case 78:
this.$ = new Literal($$[$0], TipoLiteral.CHAR, _$[$0].first_line,  _$[$0].first_column)
break;
case 79:
this.$= new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column)
break;
case 80:
this.$ = new Casteo(Type.NUMBER,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 81:
this.$ = new Casteo(Type.DOBLE,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 82:
this.$ = new Casteo(Type.CHAR,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 85:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 86:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 87:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 88:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 89:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.IGUAL_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 90:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.DIFERENTE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 91:
this.$ = new Relacional($$[$0], $$[$0], TipoRelacional.NOT, _$[$0-1].first_line,  _$[$0-1].first_column)
break;
case 92:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.OR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 93:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.AND, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 94:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line,  _$[$0-4].first_column)
break;
case 95:
this.$ = new Declaracion(-1, [$$[$0-3]], new Aritmetica(new Acceso($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column), null, TipoAritmetico.INCRE, _$[$0-3].first_line,  _$[$0-3].first_column), false, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 96:
this.$ = new Declaracion(-1, [$$[$0-3]], new Aritmetica(new Acceso($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column), null, TipoAritmetico.DECRE, _$[$0-3].first_line,  _$[$0-3].first_column), false, _$[$0-3].first_line, _$[$0-3].first_column)
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,27:$V2,34:$V3,36:$V4,37:$V5,40:$V6,44:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,51:$Vc,53:$Vd},{1:[3]},{5:[1,27],6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,27:$V2,34:$V3,36:$V4,37:$V5,40:$V6,44:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,51:$Vc,53:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),{17:[1,29]},{40:$Vf,45:30},{40:$Vf,45:32},{40:$Vf,45:33},{40:$Vf,45:34},{40:$Vf,45:35},{41:[1,37],42:[1,38],43:$Vg},{19:[1,39]},{19:[1,40]},{19:[1,41]},{19:[1,42]},{19:[1,43]},{19:[1,44]},{25:[1,45]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,13]),{17:[1,47],43:[1,46],58:$Vh},o($Vi,[2,61]),{17:[1,50],43:[1,49],58:$Vh},{17:[1,52],43:[1,51],58:$Vh},{17:[1,54],43:[1,53],58:$Vh},{17:[1,56],43:[1,55],58:$Vh},{19:$Vj,20:57,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{41:[1,73]},{42:[1,74]},{19:$Vj,20:76,35:60,40:$Vk,42:$Vl,52:75,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:76,35:60,40:$Vk,42:$Vl,52:77,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:78,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:79,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:81,35:80,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{8:83,38:82,40:[1,85],44:[1,84]},{4:86,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,26:[1,87],27:$V2,34:$V3,36:$V4,37:$V5,40:$V6,44:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,51:$Vc,53:$Vd},{19:$Vj,20:88,35:60,40:$Vk,42:$Vl,50:89,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},o($Ve,[2,47]),{40:[1,90]},{19:$Vj,20:91,35:60,40:$Vk,42:$Vl,50:92,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},o($Ve,[2,48]),{19:$Vj,20:93,35:60,40:$Vk,42:$Vl,50:94,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},o($Ve,[2,49]),{19:$Vj,20:95,35:60,40:$Vk,42:$Vl,50:96,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},o($Ve,[2,50]),{19:$Vj,20:97,35:60,40:$Vk,42:$Vl,50:98,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},o($Ve,[2,51]),{17:[1,99],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI},{19:$Vj,20:114,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:115,35:60,40:$Vk,42:$Vl,44:[1,116],46:[1,117],47:[1,118],54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},o($VJ,$VK),o($VJ,[2,73]),o($VJ,[2,74]),o($VJ,[2,75]),o($VJ,[2,76]),o($VJ,[2,77]),o($VJ,[2,78]),o($VJ,[2,79]),o($VJ,[2,83]),o($VJ,[2,84]),{19:$Vj,20:119,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:[1,120]},{19:[1,121]},{17:[1,122]},{17:[1,123]},{21:[1,124],58:$VL},o($VM,[2,59],{41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI}),{21:[1,126],58:$VL},{21:[1,127],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI},{21:[1,128],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI},o($VN,$VK,{21:[1,129]}),{41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI},{19:$Vj,20:81,35:130,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:81,35:131,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{40:[1,132]},{43:$Vg},{6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,26:[1,133],27:$V2,34:$V3,36:$V4,37:$V5,40:$V6,44:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,51:$Vc,53:$Vd},{34:[1,134]},{17:[1,135],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI,78:$VO},{17:[1,137]},o($Vi,[2,60]),{17:[1,138],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI,78:$VO},{17:[1,139]},{17:[1,140],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI,78:$VO},{17:[1,141]},{17:[1,142],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI,78:$VO},{17:[1,143]},{17:[1,144],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI,78:$VO},{17:[1,145]},o([5,16,18,19,26,27,31,33,34,36,37,40,42,44,46,47,48,49,51,53,55,57,63,64,65,66,67,68,75],[2,52]),{19:$Vj,20:146,35:60,40:$Vk,41:[1,147],42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:148,35:60,40:$Vk,42:[1,149],54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:150,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:151,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:152,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:153,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:154,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:155,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:156,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:157,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:158,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:159,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:160,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:161,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},o($VJ,[2,62]),{21:[1,162],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI},{21:[1,163]},{21:[1,164]},{21:[1,165]},o($VJ,[2,91]),{19:$Vj,20:166,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:167,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},o($Ve,[2,95]),o($Ve,[2,96]),{17:[1,168]},{19:$Vj,20:169,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{17:[1,170]},{22:171,25:$VP},{25:[1,173]},{25:[1,174]},o($VN,$VK,{17:[1,175]}),o($VN,$VK,{17:[1,176]}),{43:[1,177]},{34:[1,178]},{19:[1,179]},o($Ve,[2,37]),{19:$Vj,20:180,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},o($Ve,[2,42]),o($Ve,[2,38]),o($Ve,[2,43]),o($Ve,[2,39]),o($Ve,[2,44]),o($Ve,[2,40]),o($Ve,[2,45]),o($Ve,[2,41]),o($Ve,[2,46]),o($VQ,[2,63],{59:$Vx,60:$Vy,61:$Vz}),o($VJ,[2,70]),o($VQ,[2,64],{59:$Vx,60:$Vy,61:$Vz}),o($VJ,[2,71],{35:60,54:68,56:69,20:114,19:$Vj,40:$Vk,55:$Vm,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu}),o($VR,[2,65],{61:$Vz}),o($VR,[2,66],{61:$Vz}),o($VR,[2,67]),o([17,21,32,58,62,69,70,71,72,73,74,76,77,78],[2,68],{41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz}),o($VS,[2,85],{41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA}),o($VS,[2,86],{41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA}),o($VS,[2,87],{41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA}),o($VS,[2,88],{41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA}),o($VS,[2,89],{41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA}),o($VS,[2,90],{41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA}),o([17,21,32,58,76,78],[2,92],{41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,77:$VI}),o([17,21,32,58,76,77,78],[2,93],{41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG}),o($VJ,[2,69]),{19:$Vj,20:181,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:182,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:$Vj,20:183,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{21:[1,184],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI},{21:[1,185],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI},o($Ve,[2,54]),o($VM,[2,58],{41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI}),o($Ve,[2,55]),o($Ve,[2,17],{23:186,24:[1,187]}),{4:188,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,26:[1,189],27:$V2,34:$V3,36:$V4,37:$V5,40:$V6,44:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,51:$Vc,53:$Vd},{28:190,29:191,30:192,31:$VT,33:$VU},{4:195,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,26:[1,196],27:$V2,34:$V3,36:$V4,37:$V5,40:$V6,44:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,51:$Vc,53:$Vd},{39:197,40:$VV},{39:199,40:$VV},{19:$Vj,20:200,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{19:[1,201]},{19:$Vj,20:81,35:202,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{32:[1,203],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI},o($VJ,[2,80]),o($VJ,[2,81]),o($VJ,[2,82]),o($VJ,[2,56]),o($VJ,[2,57]),o($Ve,[2,14]),{11:205,18:$V1,22:204,25:$VP},{6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,26:[1,206],27:$V2,34:$V3,36:$V4,37:$V5,40:$V6,44:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,51:$Vc,53:$Vd},o($VW,[2,19]),{26:[1,208],29:207,30:209,31:$VT,33:$VU},{26:[1,210]},o($VX,[2,24]),{32:[1,211]},{19:$Vj,20:212,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,26:[1,213],27:$V2,34:$V3,36:$V4,37:$V5,40:$V6,44:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,51:$Vc,53:$Vd},o($Ve,[2,29]),{21:[1,214]},{41:[1,215],42:[1,216],43:[1,217]},{21:[1,218]},{17:[1,219],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI},{19:$Vj,20:81,35:220,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},o($VN,$VK,{21:[1,221]}),{19:$Vj,20:222,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},o($Ve,[2,15]),o($Ve,[2,16]),o($VW,[2,18]),{26:[1,223]},o($Ve,[2,21]),o($VX,[2,23]),o($Ve,[2,22]),{4:224,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,27:$V2,34:$V3,36:$V4,37:$V5,40:$V6,44:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,51:$Vc,53:$Vd},{32:[1,225],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI},o($Ve,[2,28]),{22:226,25:$VP},{41:[1,227]},{42:[1,228]},{19:$Vj,20:229,35:60,40:$Vk,42:$Vl,54:68,55:$Vm,56:69,57:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,75:$Vu},{22:230,25:$VP},o([19,40,42,55,57,63,64,65,66,67,68,75],[2,53]),o($VN,$VK,{21:[1,231]}),o($Ve,[2,31]),{17:[2,94],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI},o($Ve,[2,20]),{6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,26:[2,27],27:$V2,34:$V3,36:$V4,37:$V5,40:$V6,44:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,51:$Vc,53:$Vd},o($VX,[2,26],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,4:232,16:$V0,18:$V1,27:$V2,34:$V3,36:$V4,37:$V5,40:$V6,44:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,51:$Vc,53:$Vd}),o($Ve,[2,32]),{21:[2,34]},{21:[2,35]},{21:[2,36],41:$Vv,42:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,76:$VH,77:$VI},o($Ve,[2,33]),o($Ve,[2,30]),o($VX,[2,25],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,6:28,16:$V0,18:$V1,27:$V2,34:$V3,36:$V4,37:$V5,40:$V6,44:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,51:$Vc,53:$Vd})],
defaultActions: {27:[2,1],227:[2,34],228:[2,35]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Aritmetica, TipoAritmetico} = require("../Expresion/Aritmetica")
    const {Literal, TipoLiteral} = require("../Expresion/Literal")
    const {Relacional, TipoRelacional} = require("../Expresion/Relacional")
    const {Ternario} = require("../Expresion/Ternario")
    const {Casteo} = require("../Expresion/Casteo")
    const {Declaracion} = require("../Instruccion/Declaracion")
    const {Print} = require('../Instruccion/Print')
    const {Acceso} = require('../Expresion/Acceso')
    const {Type} = require('../Expresion/Retorno')
    const {If} = require("../Instruccion/If")
    const {Statement} = require("../Instruccion/Statement")
    const {Switch} = require("../Instruccion/Switch")
    const {Case} = require("../Instruccion/Case")
    const {Break} = require("../Instruccion/Break")
    const {While} = require("../Instruccion/While")
    const {Continue} = require("../Instruccion/Continue")
    const { Program }= require( "../Misc/Program")
    const {DoWhile} = require("../Instruccion/DoWhile")
    const {ToUpper} = require("../Instruccion/ToUpper")
    const {ToLower} = require("../Instruccion/ToLower")
    const {For} = require("../Instruccion/For")

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 53; 
break;
case 4:return 51; 
break;
case 5:return 65; 
break;
case 6:return 66; 
break;
case 7:return 44; 
break;
case 8:return 48; 
break;
case 9:return 47; 
break;
case 10:return 49; 
break;
case 11:return 46; 
break;
case 12:return 18;
break;
case 13:return 24;
break;
case 14:return 27;
break;
case 15:return 31;
break;
case 16:return 33;
break;
case 17:return 16;
break;
case 18:return 34;
break;
case 19:return 'TK_CONTINUE';
break;
case 20:return 36;
break;
case 21:return 37;
break;
case 22:return 55;
break;
case 23:return 57;
break;
case 24: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 67; 
break;
case 25: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 68; 
break;
case 26:return 64;
break;
case 27:return 63;
break;
case 28:return 40;
break;
case 29:return 19;
break;
case 30:return 21;
break;
case 31:return 25;
break;
case 32:return 26;
break;
case 33:return 17;
break;
case 34:return 32; 
break;
case 35:return 58;
break;
case 36:return 41;
break;
case 37:return 42;
break;
case 38:return 59;
break;
case 39:return 60;
break;
case 40:return 61;
break;
case 41:return 62;
break;
case 42:return 73;
break;
case 43:return 71;
break;
case 44:return 72;
break;
case 45:return 69;
break;
case 46:return 70;
break;
case 47:return 43;
break;
case 48:return 74;
break;
case 49:return 75;
break;
case 50:return 76; 
break;
case 51:return 77;
break;
case 52:return 78; 
break;
case 53: Program.consola += "Error Lexico - El carecter '" + yy_.yytext + "' no pertenece al lenguaje (Linea " + yy_.yylloc.first_line + "; Columna " + yy_.yylloc.first_column + ")" 
break;
case 54:return 5;
break;
}
},
rules: [/^(?:[\r\t\n\s]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:doble\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:continue\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}