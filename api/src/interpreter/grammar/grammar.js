/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,26],$V2=[1,27],$V3=[1,28],$V4=[1,30],$V5=[1,29],$V6=[1,23],$V7=[1,32],$V8=[1,24],$V9=[1,25],$Va=[1,34],$Vb=[1,36],$Vc=[1,33],$Vd=[1,35],$Ve=[1,31],$Vf=[5,18,26,34,35,39,41,42,44,45,48,55,56,58,74,75,90,91,92],$Vg=[1,43],$Vh=[1,57],$Vi=[1,65],$Vj=[1,56],$Vk=[1,72],$Vl=[1,73],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,71],$Vt=[33,48,93],$Vu=[19,51,63],$Vv=[1,100],$Vw=[1,101],$Vx=[1,102],$Vy=[1,103],$Vz=[1,104],$VA=[1,105],$VB=[1,106],$VC=[1,107],$VD=[1,108],$VE=[1,109],$VF=[1,110],$VG=[1,111],$VH=[1,112],$VI=[1,113],$VJ=[19,29,40,49,50,63,64,65,66,67,78,79,80,81,82,83,85,86,87,94],$VK=[2,68],$VL=[2,109],$VM=[1,135],$VN=[29,63,94],$VO=[49,50,64,65,66,67,78,79,80,81,82,83,85,86],$VP=[29,63],$VQ=[1,187],$VR=[19,29,40,49,50,63,67,78,79,80,81,82,83,85,86,87,94],$VS=[19,29,40,49,50,63,64,65,67,78,79,80,81,82,83,85,86,87,94],$VT=[19,29,40,63,78,79,80,81,82,83,85,86,87,94],$VU=[1,220],$VV=[1,219],$VW=[1,224],$VX=[5,18,26,32,34,35,39,41,42,44,45,48,55,56,58,74,75,90,91,92],$VY=[34,39,41],$VZ=[63,94];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"print":9,"unaria":10,"if":11,"switch":12,"while":13,"for":14,"do_while":15,"funcion":16,"metodo":17,"TK_BREAK":18,"TK_PTCOMA":19,"return":20,"llamada":21,"vector_1":22,"mod_vector1":23,"vector_2":24,"mod_vector2":25,"TK_IF":26,"TK_PARIZQ":27,"expresion":28,"TK_PARDER":29,"statement":30,"else":31,"TK_ELSE":32,"TK_LLAVIZQ":33,"TK_LLAVDER":34,"TK_SWITCH":35,"case_list":36,"default":37,"case":38,"TK_CASE":39,"TK_DOSPTS":40,"TK_DEFAULT":41,"TK_WHILE":42,"condicion":43,"TK_DO":44,"TK_FOR":45,"dec_for":46,"actualizacion":47,"IDENTIFICADOR":48,"TK_SUMA":49,"TK_RESTA":50,"TK_IGUAL":51,"tipo":52,"listaIdentificador":53,"ternario":54,"TK_INT":55,"TK_PRINT":56,"listaExpresion":57,"TK_PRINTLN":58,"to_lower":59,"TK_LOWER":60,"to_upper":61,"TK_UPPER":62,"TK_COMA":63,"TK_POR":64,"TK_DIVIDIR":65,"TK_POTENCIA":66,"TK_MODULO":67,"ENTERO":68,"DECIMAL":69,"TK_TRUE":70,"TK_FALSE":71,"CADENA":72,"CHAR":73,"TK_DOBLE":74,"TK_CHAR":75,"acceso_vector1":76,"acceso_vector2":77,"TK_MENOR":78,"TK_MAYOR":79,"TK_MENORIG":80,"TK_MAYORIG":81,"TK_DOBLEIG":82,"TK_NOIG":83,"TK_NOT":84,"TK_OR":85,"TK_AND":86,"TK_INTE":87,"parametros":88,"TK_VOID":89,"TK_STRING":90,"TK_BOOLEAN":91,"TK_RETURN":92,"TK_CORIZQ":93,"TK_CORDER":94,"TK_NEW":95,"lista_vector":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"TK_BREAK",19:"TK_PTCOMA",26:"TK_IF",27:"TK_PARIZQ",29:"TK_PARDER",32:"TK_ELSE",33:"TK_LLAVIZQ",34:"TK_LLAVDER",35:"TK_SWITCH",39:"TK_CASE",40:"TK_DOSPTS",41:"TK_DEFAULT",42:"TK_WHILE",44:"TK_DO",45:"TK_FOR",48:"IDENTIFICADOR",49:"TK_SUMA",50:"TK_RESTA",51:"TK_IGUAL",55:"TK_INT",56:"TK_PRINT",58:"TK_PRINTLN",60:"TK_LOWER",62:"TK_UPPER",63:"TK_COMA",64:"TK_POR",65:"TK_DIVIDIR",66:"TK_POTENCIA",67:"TK_MODULO",68:"ENTERO",69:"DECIMAL",70:"TK_TRUE",71:"TK_FALSE",72:"CADENA",73:"CHAR",74:"TK_DOBLE",75:"TK_CHAR",78:"TK_MENOR",79:"TK_MAYOR",80:"TK_MENORIG",81:"TK_MAYORIG",82:"TK_DOBLEIG",83:"TK_NOIG",84:"TK_NOT",85:"TK_OR",86:"TK_AND",87:"TK_INTE",89:"TK_VOID",90:"TK_STRING",91:"TK_BOOLEAN",92:"TK_RETURN",93:"TK_CORIZQ",94:"TK_CORDER",95:"TK_NEW"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[11,6],[31,2],[31,2],[31,0],[30,3],[30,2],[12,8],[12,7],[12,7],[36,2],[36,1],[38,4],[38,3],[37,3],[13,7],[13,6],[15,8],[15,7],[14,8],[14,8],[47,3],[47,3],[47,3],[7,5],[7,5],[7,3],[8,4],[46,5],[9,5],[9,5],[59,4],[61,4],[57,3],[57,1],[53,3],[53,1],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,4],[28,4],[28,4],[28,1],[28,1],[28,1],[28,1],[28,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,3],[54,5],[10,4],[10,4],[16,7],[16,6],[17,7],[17,6],[88,4],[88,2],[52,1],[52,1],[52,1],[52,1],[52,1],[20,3],[21,4],[21,3],[22,9],[22,11],[76,4],[23,7],[24,11],[24,16],[77,7],[25,10],[96,5],[96,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    return $$[$0-1]

break;
case 2: case 31:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 32:
 this.$ = [$$[$0]]; 
break;
case 15:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 22:
this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 23: case 24: case 44:
this.$ = $$[$0]
break;
case 25:
this.$ = null
break;
case 26:
this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 27:
this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 28:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 29:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 30:
this.$ = new Switch($$[$0-4], null, $$[$0], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 33:
this.$ = new Case($$[$0-2], new Statement($$[$0], _$[$0-3].first_line, _$[$0-3].first_column), _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 34:
this.$ = new Case($$[$0-1], new Statement([], _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 35:
this.$ = new Statement($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 36:
this.$ = new While($$[$0-4], new Statement($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column), _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 37:
this.$ = new While($$[$0-3], new Statement([], _$[$0-5].first_line, _$[$0-5].first_column), _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 38:
this.$ = new While($$[$0-1], new Statement($$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column), _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 39:
this.$ = new While($$[$0], new Statement([], _$[$0-6].first_line, _$[$0-6].first_column), _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 40: case 41:
this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 42:
this.$ = new Aritmetica(new Acceso($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column), new Acceso($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column), TipoAritmetico.INCRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 43:
this.$ = new Aritmetica(new Acceso($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column), new Acceso($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column), TipoAritmetico.DECRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 45: case 46:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 47:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, true, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 48:
this.$ = new Declaracion(-1, [$$[$0-3]], $$[$0-1], false,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 49:
this.$ = new Declaracion(Type.NUMBER, [$$[$0-3]], $$[$0-1], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 50:
this.$ = new Print($$[$0-2],false, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 51:
this.$ = new Print($$[$0-2],true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 52:
this.$ = new ToLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 53:
this.$ = new ToUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 54: case 56:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 55: case 57:
this.$ = [$$[$0]]
break;
case 58:
this.$ = new Aritmetica(new Literal("-1", TipoLiteral.NUMBER, _$[$0-1].first_line,  _$[$0-1].first_column), $$[$0], TipoAritmetico.MULTIPLICACION, _$[$0-1].first_line,  _$[$0-1].first_column)
break;
case 59:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.SUMA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 60:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.RESTA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 61:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MULTIPLICACION, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 62:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.DIVISION, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 63:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.POTENCIA, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 64:
this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MODULO, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 65:
this.$ = $$[$0-1]
break;
case 66:
this.$ = new Aritmetica($$[$0-2], $$[$0-2], TipoAritmetico.INCRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 67:
this.$ = new Aritmetica($$[$0-2], $$[$0-2], TipoAritmetico.DECRE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 69:
this.$ = new Literal($$[$0], TipoLiteral.NUMBER, _$[$0].first_line,  _$[$0].first_column)
break;
case 70:
this.$ = new Literal($$[$0], TipoLiteral.DOBLE, _$[$0].first_line,  _$[$0].first_column)
break;
case 71: case 72:
this.$ = new Literal($$[$0], TipoLiteral.BOOLEAN, _$[$0].first_line,  _$[$0].first_column)
break;
case 73:
this.$ = new Literal($$[$0], TipoLiteral.STRING, _$[$0].first_line,  _$[$0].first_column)
break;
case 74:
this.$ = new Literal($$[$0], TipoLiteral.CHAR, _$[$0].first_line,  _$[$0].first_column)
break;
case 75:
this.$= new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column)
break;
case 76:
this.$ = new Casteo(Type.NUMBER,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 77:
this.$ = new Casteo(Type.DOBLE,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 78:
this.$ = new Casteo(Type.CHAR,$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 84:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 85:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 86:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 87:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 88:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.IGUAL_IGUAL, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 89:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.DIFERENTE, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 90:
this.$ = new Relacional($$[$0], $$[$0], TipoRelacional.NOT, _$[$0-1].first_line,  _$[$0-1].first_column)
break;
case 91:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.OR, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 92:
this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.AND, _$[$0-2].first_line,  _$[$0-2].first_column)
break;
case 93:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line,  _$[$0-4].first_column)
break;
case 94:
this.$ = new Declaracion(-1, [$$[$0-3]], new Aritmetica(new Acceso($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column), null, TipoAritmetico.INCRE, _$[$0-3].first_line,  _$[$0-3].first_column), false, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 95:
this.$ = new Declaracion(-1, [$$[$0-3]], new Aritmetica(new Acceso($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column), null, TipoAritmetico.DECRE, _$[$0-3].first_line,  _$[$0-3].first_column), false, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 96:
this.$ = new Funcion($$[$0-6], $$[$0], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 97: case 99:
this.$ = new Funcion($$[$0-5], $$[$0], [], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 98:
this.$ = new Funcion($$[$0-6], $$[$0], $$[$0-4], Type.VOID, _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 100:
$$[$0-3].push(new Parametro($$[$0-1], $$[$0])); this.$ = $$[$0-3];
break;
case 101:
this.$ = [new Parametro($$[$0-1], $$[$0])]
break;
case 102:
this.$ = Type.NUMBER
break;
case 103:
this.$ = Type.STRING
break;
case 104:
this.$ = Type.DOBLE
break;
case 105:
this.$ = Type.BOOLEAN
break;
case 106:
this.$ = Type.CHAR
break;
case 107:
this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 108:
this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 109:
this.$ = new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 110:
this.$ = new DeclararVector1($$[$0-8], $$[$0-8], $$[$0-7], $$[$0-2],new Literal("-999", TipoLiteral.NUMBER, _$[$0-8].first_line,  _$[$0-8].first_column) , _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 111:
this.$ = new DeclararVector1($$[$0-10], $$[$0-4], $$[$0-9], [], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column)
break;
case 112:
this.$= new AccesoVector1($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 113:
this.$= new ModVector1($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 114:
this.$ = new DeclararVector2($$[$0-10], $$[$0-10], $$[$0-9], $$[$0-2],new Literal("-999", TipoLiteral.NUMBER, _$[$0-10].first_line,  _$[$0-10].first_column), new Literal("-999", TipoLiteral.NUMBER, _$[$0-10].first_line,  _$[$0-10].first_column) , _$[$0-10].first_line, _$[$0-10].first_column)
break;
case 115:
this.$ = new DeclararVector2($$[$0-15], $$[$0-7], $$[$0-14], [], $$[$0-5], $$[$0-2], _$[$0-15].first_line, _$[$0-15].first_column)
break;
case 116:
this.$= new AccesoVector2($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 117:
this.$= new ModVector2($$[$0-9],$$[$0-7],$$[$0-4],$$[$0-1],_$[$0-9].first_line, _$[$0-9].first_column)
break;
case 118:
$$[$0-4].push($$[$0-1]); this.$ = $$[$0-4];
break;
case 119:
this.$ = [$$[$0-1]]
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,35:$V2,42:$V3,44:$V4,45:$V5,48:$V6,52:22,55:$V7,56:$V8,58:$V9,74:$Va,75:$Vb,90:$Vc,91:$Vd,92:$Ve},{1:[3]},{5:[1,37],6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,35:$V2,42:$V3,44:$V4,45:$V5,48:$V6,52:22,55:$V7,56:$V8,58:$V9,74:$Va,75:$Vb,90:$Vc,91:$Vd,92:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),{19:[1,39]},o($Vf,[2,16]),{19:[1,40]},o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),{48:[1,42],53:41},{27:[1,46],49:[1,44],50:[1,45],51:$Vg,93:[1,47]},{27:[1,48]},{27:[1,49]},{27:[1,50]},{27:[1,51]},{27:[1,52]},{27:[1,53]},{33:[1,54]},{21:68,27:$Vh,28:55,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($Vt,[2,102]),o($Vt,[2,103]),o($Vt,[2,104]),o($Vt,[2,105]),o($Vt,[2,106]),{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,15]),o($Vf,[2,17]),{19:[1,75],51:[1,74],63:[1,76]},o($Vu,[2,57],{93:[1,77]}),{21:68,27:$Vh,28:78,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{49:[1,79]},{50:[1,80]},{21:68,27:$Vh,28:85,29:[1,82],43:58,48:$Vi,50:$Vj,52:84,55:$V7,57:83,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Va,75:$Vb,76:69,77:70,84:$Vs,88:81,90:$Vc,91:$Vd},{21:68,27:$Vh,28:86,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:85,43:58,48:$Vi,50:$Vj,57:87,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:85,43:58,48:$Vi,50:$Vj,57:88,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:89,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:90,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:92,43:91,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{8:94,46:93,48:[1,96],55:[1,95]},{4:97,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,34:[1,98],35:$V2,42:$V3,44:$V4,45:$V5,48:$V6,52:22,55:$V7,56:$V8,58:$V9,74:$Va,75:$Vb,90:$Vc,91:$Vd,92:$Ve},{19:[1,99],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},{21:68,27:$Vh,28:114,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:115,43:58,48:$Vi,50:$Vj,55:[1,116],59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:[1,117],75:[1,118],76:69,77:70,84:$Vs},o($VJ,$VK),o($VJ,[2,69]),o($VJ,[2,70]),o($VJ,[2,71]),o($VJ,[2,72]),o($VJ,[2,73]),o($VJ,[2,74]),o($VJ,[2,75],{27:[1,119],93:[1,120]}),o($VJ,[2,79]),o($VJ,[2,80]),o($VJ,[2,81]),o($VJ,[2,82]),o($VJ,[2,83]),{21:68,27:$Vh,28:121,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{27:[1,122]},{27:[1,123]},{21:68,27:$Vh,28:124,43:58,48:$Vi,50:$Vj,54:125,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($Vf,[2,47]),{48:[1,126]},{94:[1,127]},{19:[1,128],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},{19:[1,129]},{19:[1,130]},{29:[1,131],63:[1,132]},{19:$VL,40:[1,133]},{29:[1,134],63:$VM},{48:[1,136]},o($VN,[2,55],{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI}),{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI,94:[1,137]},{29:[1,138],63:$VM},{29:[1,139],63:$VM},{29:[1,140],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},{29:[1,141],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},o($VO,$VK,{29:[1,142]}),{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},{21:68,27:$Vh,28:92,43:143,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:92,43:144,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{48:[1,145]},{51:$Vg},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,34:[1,146],35:$V2,42:$V3,44:$V4,45:$V5,48:$V6,52:22,55:$V7,56:$V8,58:$V9,74:$Va,75:$Vb,90:$Vc,91:$Vd,92:$Ve},{42:[1,147]},o($Vf,[2,107]),{21:68,27:$Vh,28:148,43:58,48:$Vi,49:[1,149],50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:150,43:58,48:$Vi,50:[1,151],59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:152,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:153,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:154,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:155,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:156,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:157,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:158,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:159,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:160,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:161,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:162,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:163,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($VJ,[2,58]),{29:[1,164],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},{29:[1,165]},{29:[1,166]},{29:[1,167]},{21:68,27:$Vh,28:85,29:[1,168],43:58,48:$Vi,50:$Vj,57:83,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:169,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($VJ,[2,90]),{21:68,27:$Vh,28:170,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:171,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{19:[1,172],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI,87:[1,173]},{19:[1,174]},o($Vu,[2,56]),{51:[1,175],93:[1,176]},o([5,18,26,27,34,35,39,41,42,44,45,48,50,55,56,58,60,62,68,69,70,71,72,73,74,75,84,90,91,92],[2,48]),o($Vf,[2,94]),o($Vf,[2,95]),{40:[1,177]},{52:178,55:$V7,74:$Va,75:$Vb,90:$Vc,91:$Vd},{52:179,55:$V7,74:$Va,75:$Vb,89:[1,180],90:$Vc,91:$Vd},o($VJ,[2,108]),{21:68,27:$Vh,28:181,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($VP,[2,101]),{51:[1,182],93:[1,183]},{19:[1,184]},{19:[1,185]},{30:186,33:$VQ},{33:[1,188]},{33:[1,189]},o($VO,$VK,{19:[1,190]}),o($VO,$VK,{19:[1,191]}),{51:[1,192]},{42:[1,193]},{27:[1,194]},o($VR,[2,59],{64:$Vx,65:$Vy,66:$Vz}),o($VJ,[2,66]),o($VR,[2,60],{64:$Vx,65:$Vy,66:$Vz}),o($VJ,[2,67],{43:58,59:66,61:67,21:68,76:69,77:70,28:114,27:$Vh,48:$Vi,60:$Vk,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,84:$Vs}),o($VS,[2,61],{66:$Vz}),o($VS,[2,62],{66:$Vz}),o($VS,[2,63]),o([19,29,40,63,67,78,79,80,81,82,83,85,86,87,94],[2,64],{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz}),o($VT,[2,84],{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA}),o($VT,[2,85],{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA}),o($VT,[2,86],{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA}),o($VT,[2,87],{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA}),o($VT,[2,88],{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA}),o($VT,[2,89],{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA}),o([19,29,40,63,85,87,94],[2,91],{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,86:$VI}),o([19,29,40,63,85,86,87,94],[2,92],{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG}),o($VJ,[2,65]),{21:68,27:$Vh,28:195,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:196,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:197,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($VJ,$VL),{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI,94:[1,198]},{29:[1,199],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},{29:[1,200],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},o($Vf,[2,45]),{21:68,27:$Vh,28:201,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($Vf,[2,46]),{93:[1,202],95:[1,203]},{94:[1,204]},{52:205,55:$V7,74:$Va,75:$Vb,89:[1,206],90:$Vc,91:$Vd},{48:[1,207]},{30:208,33:$VQ},{30:209,33:$VQ},o($VN,[2,54],{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI}),{21:68,27:$Vh,28:210,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:211,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($Vf,[2,50]),o($Vf,[2,51]),o($Vf,[2,25],{31:212,32:[1,213]}),{4:214,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,34:[1,215],35:$V2,42:$V3,44:$V4,45:$V5,48:$V6,52:22,55:$V7,56:$V8,58:$V9,74:$Va,75:$Vb,90:$Vc,91:$Vd,92:$Ve},{36:216,37:217,38:218,39:$VU,41:$VV},{4:221,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,34:[1,222],35:$V2,42:$V3,44:$V4,45:$V5,48:$V6,52:22,55:$V7,56:$V8,58:$V9,74:$Va,75:$Vb,90:$Vc,91:$Vd,92:$Ve},{47:223,48:$VW},{47:225,48:$VW},{21:68,27:$Vh,28:226,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{27:[1,227]},{21:68,27:$Vh,28:92,43:228,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($VJ,[2,76]),o($VJ,[2,77]),o($VJ,[2,78]),o($VJ,[2,112],{93:[1,229]}),o($VJ,[2,52]),o($VJ,[2,53]),{40:[1,230],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},{21:68,27:$Vh,28:85,43:58,48:$Vi,50:$Vj,57:231,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{52:232,55:$V7,74:$Va,75:$Vb,90:$Vc,91:$Vd},{51:[1,233]},{30:234,33:$VQ},{30:235,33:$VQ},o($VP,[2,100]),o($Vf,[2,97]),o($Vf,[2,99]),{19:[1,236],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI,94:[1,237]},o($Vf,[2,22]),{11:239,26:$V1,30:238,33:$VQ},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,34:[1,240],35:$V2,42:$V3,44:$V4,45:$V5,48:$V6,52:22,55:$V7,56:$V8,58:$V9,74:$Va,75:$Vb,90:$Vc,91:$Vd,92:$Ve},o($VX,[2,27]),{34:[1,242],37:241,38:243,39:$VU,41:$VV},{34:[1,244]},o($VY,[2,32]),{40:[1,245]},{21:68,27:$Vh,28:246,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,34:[1,247],35:$V2,42:$V3,44:$V4,45:$V5,48:$V6,52:22,55:$V7,56:$V8,58:$V9,74:$Va,75:$Vb,90:$Vc,91:$Vd,92:$Ve},o($Vf,[2,37]),{29:[1,248]},{49:[1,249],50:[1,250],51:[1,251]},{29:[1,252]},{19:[1,253],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},{21:68,27:$Vh,28:92,43:254,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($VO,$VK,{29:[1,255]}),{21:68,27:$Vh,28:256,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{21:68,27:$Vh,28:257,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{63:$VM,94:[1,258]},{93:[1,259]},{93:[1,260],95:[1,261]},o($Vf,[2,96]),o($Vf,[2,98]),o($Vf,[2,113]),{51:[1,262]},o($Vf,[2,23]),o($Vf,[2,24]),o($VX,[2,26]),{34:[1,263]},o($Vf,[2,29]),o($VY,[2,31]),o($Vf,[2,30]),{4:264,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,35:$V2,42:$V3,44:$V4,45:$V5,48:$V6,52:22,55:$V7,56:$V8,58:$V9,74:$Va,75:$Vb,90:$Vc,91:$Vd,92:$Ve},{40:[1,265],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},o($Vf,[2,36]),{30:266,33:$VQ},{49:[1,267]},{50:[1,268]},{21:68,27:$Vh,28:269,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{30:270,33:$VQ},o([27,48,50,60,62,68,69,70,71,72,73,84],[2,49]),o($VO,$VK,{29:[1,271]}),o($Vf,[2,39]),{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI,94:[1,272]},{19:[2,93],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},{19:[1,273]},{21:68,27:$Vh,28:274,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{93:[1,276],96:275},{52:277,55:$V7,74:$Va,75:$Vb,90:$Vc,91:$Vd},{21:68,27:$Vh,28:278,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($Vf,[2,28]),{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,34:[2,35],35:$V2,42:$V3,44:$V4,45:$V5,48:$V6,52:22,55:$V7,56:$V8,58:$V9,74:$Va,75:$Vb,90:$Vc,91:$Vd,92:$Ve},o($VY,[2,34],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,20:16,21:17,22:18,23:19,24:20,25:21,52:22,4:279,18:$V0,26:$V1,35:$V2,42:$V3,44:$V4,45:$V5,48:$V6,55:$V7,56:$V8,58:$V9,74:$Va,75:$Vb,90:$Vc,91:$Vd,92:$Ve}),o($Vf,[2,40]),{29:[2,42]},{29:[2,43]},{29:[2,44],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},o($Vf,[2,41]),o($Vf,[2,38]),o($VJ,[2,116]),o($Vf,[2,110]),{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI,94:[1,280]},{63:[1,282],94:[1,281]},{21:68,27:$Vh,28:85,43:58,48:$Vi,50:$Vj,57:283,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{93:[1,284]},{19:[1,285],49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI},o($VY,[2,33],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,20:16,21:17,22:18,23:19,24:20,25:21,52:22,6:38,18:$V0,26:$V1,35:$V2,42:$V3,44:$V4,45:$V5,48:$V6,55:$V7,56:$V8,58:$V9,74:$Va,75:$Vb,90:$Vc,91:$Vd,92:$Ve}),{19:[1,286]},{19:[1,287]},{93:[1,288]},{63:$VM,94:[1,289]},{21:68,27:$Vh,28:290,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($Vf,[2,117]),o($Vf,[2,111]),o($Vf,[2,114]),{21:68,27:$Vh,28:85,43:58,48:$Vi,50:$Vj,57:291,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},o($VZ,[2,119]),{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI,94:[1,292]},{63:$VM,94:[1,293]},{93:[1,294]},o($VZ,[2,118]),{21:68,27:$Vh,28:295,43:58,48:$Vi,50:$Vj,59:66,60:$Vk,61:67,62:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,76:69,77:70,84:$Vs},{49:$Vv,50:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,85:$VH,86:$VI,94:[1,296]},{19:[1,297]},o($Vf,[2,115])],
defaultActions: {37:[2,1],267:[2,42],268:[2,43]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Aritmetica, TipoAritmetico} = require("../Expresion/Aritmetica")
    const {Literal, TipoLiteral} = require("../Expresion/Literal")
    const {Relacional, TipoRelacional} = require("../Expresion/Relacional")
    const {Ternario} = require("../Expresion/Ternario")
    const {Casteo} = require("../Expresion/Casteo")
    const {Declaracion} = require("../Instruccion/Declaracion")
    const {Print} = require('../Instruccion/Print')
    const {Acceso} = require('../Expresion/Acceso')
    const {Type} = require('../Expresion/Retorno')
    const {If} = require("../Instruccion/If")
    const {Statement} = require("../Instruccion/Statement")
    const {Switch} = require("../Instruccion/Switch")
    const {Case} = require("../Instruccion/Case")
    const {Break} = require("../Instruccion/Break")
    const {While} = require("../Instruccion/While")
    const {Continue} = require("../Instruccion/Continue")
    const { Program }= require( "../Misc/Program")
    const {DoWhile} = require("../Instruccion/DoWhile")
    const {ToUpper} = require("../Instruccion/ToUpper")
    const {ToLower} = require("../Instruccion/ToLower")
    const {For} = require("../Instruccion/For")
    const {Parametro} = require("../Misc/Parametro")
    const {Return} = require("../Instruccion/Return")
    const {Funcion} = require("../Instruccion/Funcion")
    const {Llamada} = require("../Instruccion/Llamada")

    const {DeclararVector1, DeclararVector2} = require("../Instruccion/DeclararVector")
    const {ModVector1, ModVector2} = require("../Instruccion/ModVector")
    const {AccesoVector1, AccesoVector2} = require("../Expresion/AccesoVector")

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 58; 
break;
case 4:return 56; 
break;
case 5:return 70; 
break;
case 6:return 71; 
break;
case 7:return 55; 
break;
case 8:return 90; 
break;
case 9:return 75; 
break;
case 10:return 91; 
break;
case 11:return 74; 
break;
case 12:return 26;
break;
case 13:return 32;
break;
case 14:return 35;
break;
case 15:return 39;
break;
case 16:return 41;
break;
case 17:return 18;
break;
case 18:return 42;
break;
case 19:return 'TK_CONTINUE';
break;
case 20:return 44;
break;
case 21:return 45;
break;
case 22:return 92;
break;
case 23:return 89;
break;
case 24:return 95;
break;
case 25:return 60;
break;
case 26:return 62;
break;
case 27: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 72; 
break;
case 28: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 73; 
break;
case 29:return 69;
break;
case 30:return 68;
break;
case 31:return 48;
break;
case 32:return 27;
break;
case 33:return 29;
break;
case 34:return 33;
break;
case 35:return 34;
break;
case 36:return 93;
break;
case 37:return 94;
break;
case 38:return 19;
break;
case 39:return 40; 
break;
case 40:return 63;
break;
case 41:return 49;
break;
case 42:return 50;
break;
case 43:return 64;
break;
case 44:return 65;
break;
case 45:return 66;
break;
case 46:return 67;
break;
case 47:return 82;
break;
case 48:return 80;
break;
case 49:return 81;
break;
case 50:return 78;
break;
case 51:return 79;
break;
case 52:return 51;
break;
case 53:return 83;
break;
case 54:return 84;
break;
case 55:return 85; 
break;
case 56:return 86;
break;
case 57:return 87; 
break;
case 58: Program.consola += "Error Lexico - El carecter '" + yy_.yytext + "' no pertenece al lenguaje (Linea " + yy_.yylloc.first_line + "; Columna " + yy_.yylloc.first_column + ")\n" 
break;
case 59:return 5;
break;
}
},
rules: [/^(?:[\r\t\n\s]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:doble\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:continue\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}